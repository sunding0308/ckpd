[ 2019-12-13T07:33:42+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.002849s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.003466s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003496s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000017s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000035s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.022080s ]
INFO: [ view_parse ] --END-- [ RunTime:0.022104s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002311s ]
INFO: [ view_filter ] --END-- [ RunTime:0.002330s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.003391s ]
INFO: [ app_end ] --END-- [ RunTime:0.003410s ]

[ 2019-12-13T07:33:42+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000749s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000556s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000585s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0029s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0032s ]

[ 2019-12-13T07:34:34+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000438s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000444s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000458s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000015s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000032s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009128s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009153s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000447s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000461s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000556s ]
INFO: [ app_end ] --END-- [ RunTime:0.000568s ]

[ 2019-12-13T07:34:34+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000519s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000606s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000623s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0025s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0019s ]

[ 2019-12-13T07:35:22+08:00 ] 192.168.3.91 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.001168s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000455s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000468s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000014s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000027s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006728s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006746s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000370s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000382s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000505s ]
INFO: [ app_end ] --END-- [ RunTime:0.000516s ]

[ 2019-12-13T07:35:22+08:00 ] 192.168.3.91 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000388s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000408s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000418s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0014s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0024s ]

[ 2019-12-13T07:35:25+08:00 ] 192.168.3.91 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000003s ]
INFO: [ app_init ] --END-- [ RunTime:0.000378s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000425s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000436s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0015s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0018s ]

[ 2019-12-13T07:37:48+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000567s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000568s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000580s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0015s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0022s ]

[ 2019-12-13T07:50:53+08:00 ] 192.168.3.91 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000608s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000572s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000587s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000015s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000029s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008869s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008922s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000594s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000607s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000672s ]
INFO: [ app_end ] --END-- [ RunTime:0.000683s ]

[ 2019-12-13T07:50:53+08:00 ] 192.168.3.91 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000453s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000538s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000554s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0015s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0019s ]

[ 2019-12-13T07:50:56+08:00 ] 192.168.3.91 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000003s ]
INFO: [ app_init ] --END-- [ RunTime:0.000376s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000405s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000418s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000015s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000029s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008951s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008973s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000387s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000404s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000513s ]
INFO: [ app_end ] --END-- [ RunTime:0.000525s ]

[ 2019-12-13T07:50:56+08:00 ] 192.168.3.91 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000681s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000439s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000450s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0015s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0022s ]

[ 2019-12-13T08:01:44+08:00 ] 192.168.3.91 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.001033s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000750s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000771s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000019s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000039s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008904s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008930s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000536s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000550s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000689s ]
INFO: [ app_end ] --END-- [ RunTime:0.000702s ]

[ 2019-12-13T08:01:44+08:00 ] 192.168.3.91 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000433s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000494s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000510s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0010s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0023s ]

[ 2019-12-13T08:01:53+08:00 ] 192.168.3.91 /Home/Index/detail?id=31
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000003s ]
INFO: [ app_init ] --END-- [ RunTime:0.000404s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001015s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001079s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0014s ]
SQL: SELECT * FROM `articles` WHERE `id` = 31 LIMIT 1   [ RunTime:0.0004s ]
SQL: UPDATE `articles` SET `origin_url`='https://js.aizhan.com/develop/java/10670.html',`title`='详解Javaweb应用使用限流处理大量的并发请求',`text`='<div class=\"container\">
							
<p>我们在web开发的时候，要考虑如何避免大量的客户端请求同时被发送到服务器，接下来大家跟着信息管理部技术频道小编一起详解<span style=\"color:#002FD9\"><span style=\"color:#002FD9\">Java</span></span>web应用使用限流处理大量的并发请求吧！</p>

<p>第一种方法：在容器中配置最大请求数，如果大于改请求数，则客户端阻塞。该方法有效的阻止了大量的请求同时访问业务系统，但对用户不友好。</p>

<p>第二种方法：使用过滤器，保证一定数量的请求能够正常访问系统，多余的请求先跳转到排队页面，由排队页面定时发起请求。过滤器实现如下：</p>

<div class=\"aizhancode\">
<div class=\"codebody\"><pre class=\"brush:java;\">
public class ServiceFilter implements Filter {
	
	private static final int MAX_COUNT = 20;
	
	private AtomicInteger filterCount = 0;

	public void doFilter(ServletRequest request, ServletResponse response,
			FilterChain chain) throws IOException, ServletException {
		System.out.println(\"before\"+filterCount);
		if(filterCount > MAX_COUNT) {
			//请求个数太多，跳转到排队页面
			request.getRequestDispatcher(\"index.jsp\").forward(request, response);
		} else {
			//请求个数加1
			filterCount.incrementAndGet();

			chain.doFilter(request, response);
			//访问结束，请求个数减1
			filterCount.decrementAndGet();
		}
	}</pre></div>
</div>

<p>此种方式的实现就是限流。可以参考RateLimiter的令牌桶限流策略的实现。</p>

<div class=\"aizhancode\">
<div class=\"codebody\"><pre class=\"brush:java;\">
public class RateLimiterUtils {
	private static Logger logger = LoggerFactory.getLogger(RateLimiterUtils.class);
	private static final ConcurrentHashMap<String, RateLimiter> resourceLimitMap = 
			new ConcurrentHashMap<String, RateLimiter>();
	
	/**
	 * 限流
	 * @param resource 需要限流的对象的标识
	 * @return true表示得到了许可，没有达到限流阀值，false表示得不到许可，达到了限流阀值。
	 * @author: hejinen
	 * @date:2016年10月19日 上午11:08:49
	 */
	public static boolean rateLimit(String resource) {
		RateLimiter limit = getRateLimit(resource);
		return limit.tryAcquire();
	}
    /**
	 * 获取某个需限流对象的RateLimiter，如不存在则创建新的
	 * @param resouce 需要限流的对象标识
	 */
	public static RateLimiter getRateLimit(String resource) {
		RateLimiter limit = resourceLimitMap.get(resource);	
		if(limit == null) {
			synchronized(RateLimiterUtils.class) {
				limit = resourceLimitMap.get(resource);
				double qps = getQpsByResource(resource);
				if(limit == null) {
					limit = RateLimiter.create(qps);
					resourceLimitMap.put(resource, limit);
					LoggerUtil.info(RateLimiterUtils.class, \"create rate limiter for key:{0},QPS:{1}\", resource,qps);
				}
			}
		}
		return resourceLimitMap.get(resource);
	}
}</pre></div>
</div>

<p>以上就是信息管理部技术频道小编给大家带来的详解Javaweb应用使用限流处理大量的并发请求，希望能给大家提供到帮助!如果大家有充足的时间，可以多操作几次，看看效果如何。</p>
						</div>
					',`creator`='信息管理部',`created_at`='2019-12-13 08:01:32',`updated_at`='2019-12-13 08:01:32',`click`='1' WHERE `id` = 31 [ RunTime:0.0011s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000016s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000028s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007013s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007029s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000364s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000376s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000501s ]
INFO: [ app_end ] --END-- [ RunTime:0.000513s ]

[ 2019-12-13T08:01:53+08:00 ] 192.168.3.91 /Home/Index/ShowDetail?id=31
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000696s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000457s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000468s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0010s ]
SQL: SELECT * FROM `articles` WHERE `id` = 31 LIMIT 1   [ RunTime:0.0003s ]

[ 2019-12-13T08:02:19+08:00 ] 192.168.3.91 /Home/Index/detail?id=31
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.001097s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000855s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000883s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0006s ]
SQL: SELECT * FROM `articles` WHERE `id` = 31 LIMIT 1   [ RunTime:0.0003s ]
SQL: UPDATE `articles` SET `origin_url`='https://js.aizhan.com/develop/java/10670.html',`title`='详解Javaweb应用使用限流处理大量的并发请求',`text`='<div class=\"container\">
							
<p>我们在web开发的时候，要考虑如何避免大量的客户端请求同时被发送到服务器，接下来大家跟着信息管理部技术频道小编一起详解<span style=\"color:#002FD9\"><span style=\"color:#002FD9\">Java</span></span>web应用使用限流处理大量的并发请求吧！</p>

<p>第一种方法：在容器中配置最大请求数，如果大于改请求数，则客户端阻塞。该方法有效的阻止了大量的请求同时访问业务系统，但对用户不友好。</p>

<p>第二种方法：使用过滤器，保证一定数量的请求能够正常访问系统，多余的请求先跳转到排队页面，由排队页面定时发起请求。过滤器实现如下：</p>

<div class=\"aizhancode\">
<div class=\"codebody\"><pre class=\"brush:java;\">
public class ServiceFilter implements Filter {
	
	private static final int MAX_COUNT = 20;
	
	private AtomicInteger filterCount = 0;

	public void doFilter(ServletRequest request, ServletResponse response,
			FilterChain chain) throws IOException, ServletException {
		System.out.println(\"before\"+filterCount);
		if(filterCount > MAX_COUNT) {
			//请求个数太多，跳转到排队页面
			request.getRequestDispatcher(\"index.jsp\").forward(request, response);
		} else {
			//请求个数加1
			filterCount.incrementAndGet();

			chain.doFilter(request, response);
			//访问结束，请求个数减1
			filterCount.decrementAndGet();
		}
	}</pre></div>
</div>

<p>此种方式的实现就是限流。可以参考RateLimiter的令牌桶限流策略的实现。</p>

<div class=\"aizhancode\">
<div class=\"codebody\"><pre class=\"brush:java;\">
public class RateLimiterUtils {
	private static Logger logger = LoggerFactory.getLogger(RateLimiterUtils.class);
	private static final ConcurrentHashMap<String, RateLimiter> resourceLimitMap = 
			new ConcurrentHashMap<String, RateLimiter>();
	
	/**
	 * 限流
	 * @param resource 需要限流的对象的标识
	 * @return true表示得到了许可，没有达到限流阀值，false表示得不到许可，达到了限流阀值。
	 * @author: hejinen
	 * @date:2016年10月19日 上午11:08:49
	 */
	public static boolean rateLimit(String resource) {
		RateLimiter limit = getRateLimit(resource);
		return limit.tryAcquire();
	}
    /**
	 * 获取某个需限流对象的RateLimiter，如不存在则创建新的
	 * @param resouce 需要限流的对象标识
	 */
	public static RateLimiter getRateLimit(String resource) {
		RateLimiter limit = resourceLimitMap.get(resource);	
		if(limit == null) {
			synchronized(RateLimiterUtils.class) {
				limit = resourceLimitMap.get(resource);
				double qps = getQpsByResource(resource);
				if(limit == null) {
					limit = RateLimiter.create(qps);
					resourceLimitMap.put(resource, limit);
					LoggerUtil.info(RateLimiterUtils.class, \"create rate limiter for key:{0},QPS:{1}\", resource,qps);
				}
			}
		}
		return resourceLimitMap.get(resource);
	}
}</pre></div>
</div>

<p>以上就是信息管理部技术频道小编给大家带来的详解Javaweb应用使用限流处理大量的并发请求，希望能给大家提供到帮助!如果大家有充足的时间，可以多操作几次，看看效果如何。</p>
						</div>
					',`creator`='信息管理部',`created_at`='2019-12-13 08:01:32',`updated_at`='2019-12-13 08:01:32',`click`='2' WHERE `id` = 31 [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000047s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000099s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009219s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009243s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000406s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000420s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000507s ]
INFO: [ app_end ] --END-- [ RunTime:0.000519s ]

[ 2019-12-13T08:02:19+08:00 ] 192.168.3.91 /Home/Index/ShowDetail?id=31
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000999s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000475s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000486s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0029s ]
SQL: SELECT * FROM `articles` WHERE `id` = 31 LIMIT 1   [ RunTime:0.0013s ]

[ 2019-12-13T08:22:30+08:00 ] 192.168.3.91 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000567s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000605s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000620s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000015s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000028s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.010441s ]
INFO: [ view_parse ] --END-- [ RunTime:0.010463s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000504s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000516s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000639s ]
INFO: [ app_end ] --END-- [ RunTime:0.000650s ]

[ 2019-12-13T08:22:30+08:00 ] 192.168.3.91 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000471s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000490s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000505s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0018s ]

[ 2019-12-13T08:39:56+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000629s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000671s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000686s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000018s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000035s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.010846s ]
INFO: [ view_parse ] --END-- [ RunTime:0.010870s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000606s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000620s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000759s ]
INFO: [ app_end ] --END-- [ RunTime:0.000774s ]

[ 2019-12-13T08:39:56+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000029s ]
INFO: [ app_init ] --END-- [ RunTime:0.000823s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001227s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001285s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0013s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0043s ]

[ 2019-12-13T08:40:03+08:00 ] ::1 /Home/Index/detail?id=27
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000391s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000517s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000532s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` WHERE `id` = 27 LIMIT 1   [ RunTime:0.0004s ]
SQL: UPDATE `articles` SET `origin_url`='https://js.aizhan.com/data/oracle/10561.html',`title`='Excel怎么导入oracle',`text`='<div class=\"container\">
							
<p>在oracle中我们经常会需要导入一些文件或者数据，最近小编遇到一个问题，那么就是将<span style=\"color:#002FD9\">Excel</span>导入oracle中，那么你知道Excel怎么导入oracle吗？下面就让小编为大家详细介绍吧。</p>

<p><strong><font style=\"COLOR: #ff0000\">方法一、使用SQL*Loader</font></strong><br>
这个是用的较多的方法，前提必须oracle数据中目的表已经存在。大体步骤如下：<br>
1、将excel文件另存为一个新文件比如文件名为text.txt，文件类型选文本文件（制表符分隔），这里选择类型为csv（逗号分隔）也行，但是在写后面的control.ctl时要将字段终止符改为\',\'(fields terminated by \',\'），假设保存到c盘根目录。<br><br>
2 、如果没有存在的表结构，则创建,假设表为test，有两列为dm，ms。<br><br>
3、用记事本创建SQL*Loader控制文件，网上说的文件名后缀为ctl，其实我自己发现就用txt后缀也行。比如命名为control.ctl，内容如下：(--后面的为注释，实际不需要）<br>
　　load data                   --控制文件标识<br>
　　infile \'c:\\text.txt\'        --要输入的数据文件名为test.txt<br>
　　append into table test      --向表test中追加记录<br>
　　fields terminated by X\'09\'  --字段终止于X\'09\'，是一个制表符（TAB）<br>
　　(dm,ms)                     --定义列对应顺序<br><br><strong>备注：数据导入的方式上例中用的append，有以下几种：</strong><font style=\"COLOR: #0000ff\">insert，为缺省方式，在数据装载开始时要求表为空；append，在表中追加新记录；replace，删除旧记录，替换成新装载的记录；truncate，同replace。</font><br><br>
4、在命令行提示符下使用SQL*Loader命令实现数据的输入。<br>
sqlldr userid=system/manager control=\'c:\\control.ctl\'</p>

<p><strong><font style=\"COLOR: #0000ff\">我来举个例子</font><br>
1.导出地区表的test.csv文件</strong><br>
\"01\",\"市区\"<br>
\"02\",\"柯桥\"<br>
\"03\",\"钱清\"<br>
\"04\",\"皋埠\"<br>
\"05\",\"漓渚\"<br>
\"06\",\"齐贤\"<br>
\"08\",\"袍江\"<br>
\"09\",\"平水\"<br>
\"12\",\"东浦\"<br>
....<br><strong>2.编辑sqlldr导出控制文件test.ctl内容如下：</strong><br>
load data<br>
infile \'e:\\test.csv\'<br>
replace into table test<br>
fields terminated by \',\' optionally enclosed by \'\"\'<br>
trailing nullcols<br>
(id,name)<br><strong>3.在cmd中执行:</strong><br>
E:\\>sqlldr userid=xxx/yyy@dbxx control=e:\\test.ctl log=e:\\log.txt bad=e:\\bad.txt<br>
SQL*Loader: Release 8.1.7.0.0 - Production on 星期三 7月 20 21:28:06 2005<br>
(c) Copyright 2000 <span style=\"color:#002FD9\">Oracle</span> Corporation.  All rights reserved.<br>
达到提交点，逻辑记录计数48</p>

<p><strong><font style=\"COLOR: #ff0000\">方法二、利用PLSQL Developer</font></strong><br>
使用PLSQL Developer工具，这个可是大名鼎鼎的Oracle DBA最常使用的工具。<br>
在单个文件不大的情况下(少于100000行)，并且目的表结构已经存在的情况下——对于excel而言肯定不会超过了，因为excel文件的最大行为65536—— 可以全选数据COPY ,然后用PLSQL Developer工具。<br>
  1 在PLSQL Developer的sql window里输入select * from test for update;<br>
  2 按F8执行<br>
  3 打开锁, 再按一下加号. 鼠标点到第一列的列头，使全列成选中状态，然后粘贴，最后COMMIT提交即可。<br>
还有很多第三方工具，Toad，PL/SQL Developer，SQL Navigator等等。</p>

<p><strong><font style=\"COLOR: #ff0000\">方法三 、使用其它数据转移工具作中转站。</font></strong><br>
我使用的是Sql Server 2000。<br>
先将excel表导入sqlserver数据库中，然后再从Sql server导入到oracle中。这两部操作都简单，如果不会随便查个帮助就可以了。<br><br><font style=\"COLOR: #ff0000\"><strong>这里有两个自己的经验：</strong></font><br><strong>一、是注意excel文件的版本和格式要与导入到sql server时的数据源匹配。</strong>如果导入到sql server时的数据源选Microsoft Excel 97-2000的话，而excel文件的版本为Micaosoft Excel 5.0/95 工作簿，则有可能出问题。关于如何看Excle文件格式，你打开excel文件，选择另存为，即可看到像Micaosoft Excel 5.0/95 工作簿或者是Microsoft Office Excle 工作簿等等其它的保存类型。<br><br><strong>二、就是由Sqlserver导入到oracle中时，记得将在oracle中的表名全部用大写。</strong>因为oracle的表名都是大写的，而sql的表可能是大小混写的，所以导入后在oracle里查不到该表，比如这个Products表在oracle里查询就应该写成select * from scott.\"Products\";</p>

<p>上文中小编对Excel怎么导入oracle的内容进行了详细介绍，信息管理部技术频道小编将会为大家整理更多oracle的知识，想要无时无刻都学习到这方面知识，就多多关注信息管理部技术频道的动态吧！</p>
						</div>
					',`creator`='信息管理部',`created_at`='2019-12-12 14:47:58',`updated_at`='2019-12-12 14:47:58',`click`='1' WHERE `id` = 27 [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000015s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000030s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008221s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008244s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000448s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000461s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000578s ]
INFO: [ app_end ] --END-- [ RunTime:0.000593s ]

[ 2019-12-13T08:40:03+08:00 ] ::1 /Home/Index/ShowDetail?id=27
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000553s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001236s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001309s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0019s ]
SQL: SELECT * FROM `articles` WHERE `id` = 27 LIMIT 1   [ RunTime:0.0004s ]

[ 2019-12-13T08:50:21+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000678s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000607s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000619s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0020s ]

[ 2019-12-13T08:51:07+08:00 ] 192.168.3.91 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000403s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000653s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000670s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000016s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000030s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008928s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008951s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001193s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001222s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000749s ]
INFO: [ app_end ] --END-- [ RunTime:0.000767s ]

[ 2019-12-13T08:51:07+08:00 ] 192.168.3.91 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000413s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000465s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000477s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0018s ]

[ 2019-12-13T08:51:09+08:00 ] 192.168.3.91 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000003s ]
INFO: [ app_init ] --END-- [ RunTime:0.000378s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000439s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000451s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0016s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0018s ]

[ 2019-12-13T08:51:16+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000429s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000457s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000471s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000014s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000028s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009280s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009348s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000455s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000468s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000521s ]
INFO: [ app_end ] --END-- [ RunTime:0.000532s ]

[ 2019-12-13T08:51:16+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000525s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000704s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000748s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0019s ]

[ 2019-12-13T08:51:17+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000003s ]
INFO: [ app_init ] --END-- [ RunTime:0.000381s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000419s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000432s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0007s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0023s ]

[ 2019-12-13T08:52:51+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000660s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000713s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000734s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000020s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000039s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009887s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009915s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000510s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000528s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000690s ]
INFO: [ app_end ] --END-- [ RunTime:0.000707s ]

[ 2019-12-13T08:52:51+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000647s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001556s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001588s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0010s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0037s ]

[ 2019-12-13T08:52:53+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000504s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000534s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000548s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0022s ]

[ 2019-12-13T08:53:20+08:00 ] 192.168.3.91 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000566s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000587s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000605s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000018s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000049s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.011452s ]
INFO: [ view_parse ] --END-- [ RunTime:0.011483s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000799s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000816s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000888s ]
INFO: [ app_end ] --END-- [ RunTime:0.000906s ]

[ 2019-12-13T08:53:20+08:00 ] 192.168.3.91 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000008s ]
INFO: [ app_init ] --END-- [ RunTime:0.000864s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001288s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001323s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0033s ]

[ 2019-12-13T08:53:22+08:00 ] 192.168.3.91 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000447s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000521s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000534s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0014s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0019s ]

[ 2019-12-13T08:54:09+08:00 ] ::1 /Home/Index/detail?id=7
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000430s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000510s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000525s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` WHERE `id` = 7 LIMIT 1   [ RunTime:0.0004s ]
SQL: UPDATE `articles` SET `origin_url`='https://js.aizhan.com/qukuailian/4196.html',`title`='普及区块链技术核心算法',`text`='<div class=\"container\">
							
<p>　　前不久，币圈可谓了混乱，但近期<span style=\"color:#002FD9\">区块链</span>又再次火爆起来，受到了各方的极大关注与重视，成为资本市场和各领域关注的焦点，就连朋友圈中的探讨和分享也让人目不暇接。说到底，区块链到底是个什么鬼?区块链的核心算法又有哪些?跟随信息管理部小编一起往下了解吧。</p>

<p>　　区块链核心算法一：拜占庭协定</p>

<p>　　拜占庭的故事大概是这么说的：拜占庭帝国拥有巨大的财富，周围10个邻邦垂诞已久，但拜占庭高墙耸立，固若金汤，没有一个单独的邻邦能够成功入侵。任何单个邻邦入侵的都会失败，同时也有可能自身被其他9个邻邦入侵。拜占庭帝国防御能力如此之强，至少要有十个邻邦中的一半以上同时进攻，才有可能攻破。然而，如果其中的一个或者几个邻邦本身答应好一起进攻，但实际过程出现背叛，那么入侵者可能都会被歼灭。于是每一方都小心行事，不敢轻易相信邻国。这就是拜占庭将军问题。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/32/images/201901/1547709939432237.jpeg\" width=\"640\"></p>

<p>　　在这个分布式网络里：每个将军都有一份实时与其他将军同步的消息账本。账本里有每个将军的签名都是可以验证身份的。如果有哪些消息不一致，可以知道消息不一致的是哪些将军。尽管有消息不一致的，只要超过半数同意进攻，少数服从多数，共识达成。</p>

<p>　　由此，在一个分布式的系统中，尽管有坏人，坏人可以做任意事情(不受protocol限制)，比如不响应、发送错误信息、对不同节点发送不同决定、不同错误节点联合起来干坏事等等。但是，只要大多数人是好人，就完全有可能去中心化地实现共识。</p>

<p>　　区块链核心算法二：非对称加密技术</p>

<p>　　在上述拜占庭协定中，如果10个将军中的几个同时发起消息，势必会造成系统的混乱，造成各说各的攻击时间方案，行动难以一致。谁都可以发起进攻的信息，但由谁来发出呢?其实这只要加入一个成本就可以了，即：一段时间内只有一个节点可以传播信息。当某个节点发出统一进攻的消息后，各个节点收到发起者的消息必须签名盖章，确认各自的身份。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/32/images/201901/1547709939135219.jpeg\" width=\"640\"></p>

<p>　　在如今看来，非对称加密技术完全可以解决这个签名问题。非对称加密算法的加密和解密使用不同的两个密钥.这两个密钥就是我们经常听到的”公钥”和”私钥”。公钥和私钥一般成对出现, 如果消息使用公钥加密,那么需要该公钥对应的私钥才能解密; 同样，如果消息使用私钥加密,那么需要该私钥对应的公钥才能解密。</p>

<p>　　区块链核心算法三：容错问题</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/32/images/201901/1547709940822545.jpeg\" width=\"640\"></p>

<p>　　我们假设在此网络中，消息可能会丢失、损坏、延迟、重复发送，并且接受的顺序与发送的顺序不一致。此外，节点的行为可以是任意的：可以随时加入、退出网络，可以丢弃消息、伪造消息、停止工作等，还可能发生各种人为或非人为的故障。我们的算法对由共识节点组成的共识系统，提供的容错能力，这种容错能力同时包含安全性和可用性，并适用于任何网络环境。</p>

<p>　　区块链核心算法四：Paxos 算法(一致性算法)</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/32/images/201901/1547709940482956.jpeg\" width=\"640\"></p>

<p>　　Paxos算法解决的问题是一个分布式系统如何就某个值(决议)达成一致。一个典型的场景是，在一个分布式数据库系统中，如果各节点的初始状态一致，每个节点都执行相同的操作序列，那么他们最后能得到一个一致的状态。为保证每个节点执行相同的命令序列，需要在每一条指令上执行一个“一致性算法”以保证每个节点看到的指令一致。一个通用的一致性算法可以应用在许多场景中，是分布式计算中的重要问题。 节点通信存在两种模型：共享内存和消息传递。Paxos算法就是一种基于消息传递模型的一致性算法。</p>

<p>　　区块链核心算法五：共识机制</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/32/images/201901/1547709940569092.jpeg\" width=\"640\"></p>

<p>　　区块链共识算法主要是工作量证明和权益证明。拿比特币来说，其实从技术角度来看可以把PoW看做重复使用的Hashcash，生成工作量证明在概率上来说是一个随机的过程。开采新的机密货币，生成区块时，必须得到所有参与者的同意，那矿工必须得到区块中所有数据的PoW工作证明。与此同时矿工还要时时观察调整这项工作的难度，因为对网络要求是平均每10分钟生成一个区块。</p>

<p>　　区块链核心算法六：分布式存储</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/32/images/201901/1547709940783424.jpeg\" width=\"639\"></p>

<p>　　分布式存储是一种数据存储技术，通过网络使用每台机器上的磁盘空间，并将这些分散的存储资源构成一个虚拟的存储设备，数据分散的存储在网络中的各个角落。所以，分布式存储技术并不是每台电脑都存放完整的数据，而是把数据切割后存放在不同的电脑里。就像存放100个鸡蛋，不是放在同一个篮子里，而是分开放在不同的地方，加起来的总和是100个。</p>
						</div>
					',`creator`='信息管理部',`created_at`='2019-12-12 14:47:14',`updated_at`='2019-12-12 14:47:14',`click`='1' WHERE `id` = 7 [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000017s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000031s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008645s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008685s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000474s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000488s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000582s ]
INFO: [ app_end ] --END-- [ RunTime:0.000595s ]

[ 2019-12-13T08:54:09+08:00 ] ::1 /Home/Index/ShowDetail?id=7
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000570s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000684s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000704s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0016s ]
SQL: SELECT * FROM `articles` WHERE `id` = 7 LIMIT 1   [ RunTime:0.0004s ]

[ 2019-12-13T08:55:13+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000577s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000673s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000689s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000017s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000035s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008930s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008958s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000454s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000469s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000614s ]
INFO: [ app_end ] --END-- [ RunTime:0.000628s ]

[ 2019-12-13T08:55:14+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000560s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000720s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000756s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0029s ]

[ 2019-12-13T08:55:16+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000421s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000475s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000487s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0020s ]

[ 2019-12-13T08:56:28+08:00 ] ::1 /Home/Index/detail?id=38
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000518s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000550s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000569s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` WHERE `id` = 38 LIMIT 1   [ RunTime:0.0004s ]
SQL: UPDATE `articles` SET `origin_url`='https://js.aizhan.com/data/oracle/10417.html',`title`='plsql遇到乱码怎么办',`text`='<div class=\"container\">
							
<p>当我们使用oracle数据库的时候发现plsql遇到<span style=\"color:#002FD9\">乱码</span>怎么办呢？这个问题是不是难倒了不少小伙伴们呢？那么今天我们就一起跟信息管理部小编一起去看看plsql遇到乱码的解决方法。</p>

<p>查看一些数据库服务器和客户端的额字符集有没有不同的：</p>

<div class=\"codetitle\">
<span><u></u></span> 代码如下:</div>

<div class=\"codebody\" id=\"code33686\">
<br>
select * from nls_database_parameters;<br>
select * from nls_instance_parameters;<br>
select * from v$nls_parameters t where t.PARAMETER =\'NLS_LANGUAGE\' or t.PARAMETER =\'NLS_CHARACTERSET\';<br>
select * from nls_session_parameters;</div>

<p><br><strong><font style=\"COLOR: #ff0000\">1.设置本地客户端编码:</font></strong></p>

<p> </p>

<p>进入 我的电脑,属性,高级,环境变量,添加2项:<br>
LANG=zh_CN.GBK <br>
NLS_LANG=\"SIMPLIFIED CHINESE_CHINA.ZHS16GBK\"</p>

<p><font style=\"COLOR: #ff0000\"><strong>2.更加直接的方法就是在plsql的安装文件下创建一个txt文件</strong></font></p>

<div class=\"codetitle\">
<span><u></u></span> 代码如下:</div>

<div class=\"codebody\" id=\"code25400\">
<br>
set nls_lang=simplified chinese_china.ZHS16GBK<br>
PLSQLDev.exe</div>

<p><br>
然后重命名为bat可执行文件。将上面的nls_lang配置到plsql中去。</p>

<p>plsql遇到乱码怎么办？当我们在oracle数据库中遇到此问题的时候，用户们可以按照小编为大家介绍的方法进行操作即可！</p>
						</div>
					',`creator`='信息管理部',`created_at`='2019-12-13 08:52:39',`updated_at`='2019-12-13 08:52:39',`click`='1' WHERE `id` = 38 [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000019s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000037s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009761s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009788s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000684s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000699s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000807s ]
INFO: [ app_end ] --END-- [ RunTime:0.000821s ]

[ 2019-12-13T08:56:28+08:00 ] ::1 /Home/Index/ShowDetail?id=38
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000608s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000717s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000739s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` WHERE `id` = 38 LIMIT 1   [ RunTime:0.0004s ]

[ 2019-12-13T08:58:11+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000016s ]
INFO: [ app_init ] --END-- [ RunTime:0.000621s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000692s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000709s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000017s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000030s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007978s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007997s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000505s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000520s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000623s ]
INFO: [ app_end ] --END-- [ RunTime:0.000638s ]

[ 2019-12-13T08:58:11+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000627s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000687s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000707s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0027s ]

[ 2019-12-13T08:58:16+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000407s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000483s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000495s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0007s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0020s ]

[ 2019-12-13T08:58:41+08:00 ] 192.168.3.91 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000545s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000607s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000629s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000018s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000052s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009007s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009034s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000613s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000629s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000773s ]
INFO: [ app_end ] --END-- [ RunTime:0.000787s ]

[ 2019-12-13T08:58:41+08:00 ] 192.168.3.91 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000602s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001769s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001810s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0028s ]

[ 2019-12-13T08:58:43+08:00 ] 192.168.3.91 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000003s ]
INFO: [ app_init ] --END-- [ RunTime:0.000419s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000470s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000482s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0025s ]

[ 2019-12-13T08:59:09+08:00 ] ::1 /Home/Index/detail?id=33
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000459s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000558s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000573s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` WHERE `id` = 33 LIMIT 1   [ RunTime:0.0003s ]
SQL: UPDATE `articles` SET `origin_url`='https://js.aizhan.com/data/oracle/10519.html',`title`='如何使用Oracle case函数',`text`='<div class=\"container\">
							
<p>你知道如何使用<span style=\"color:#002FD9\"><span style=\"color:#002FD9\">Oracle</span></span> case函数吗？相信很多小伙伴们对于Oracle case函数都不是非常的了解，那么我们接下来就跟信息管理部小编一起去看看关于使用Oracle case函数的方法吧。</p>

<p><strong>1.创建测试表:</strong></p>

<p> </p>

<div class=\"codetitle\">
<span><u></u></span> 代码如下:</div>

<div class=\"codebody\" id=\"code38628\">
<br>
DROP SEQUENCE student_sequence;<br>
CREATE SEQUENCE student_sequence  START WITH 10000  INCREMENT BY 1;
<p> </p>

<p>DROP TABLE students;<br>
CREATE TABLE students (<br>
  id               NUMBER(5) PRIMARY KEY,<br>
  first_name       VARCHAR2(20),<br>
  last_name        VARCHAR2(20),<br>
  major            VARCHAR2(30),<br>
  current_credits  NUMBER(3),<br>
  grade     varchar2(2));</p>

<p>INSERT INTO students (id, first_name, last_name, major, current_credits,grade)<br>
  VALUES (student_sequence.NEXTVAL, \'Scott\', \'Smith\', \'Computer Science\', 98,null);</p>

<p>INSERT INTO students (id, first_name, last_name, major, current_credits,grade)<br>
  VALUES (student_sequence.NEXTVAL, \'Margaret\', \'Mason\', \'History\', 88,null);</p>

<p>INSERT INTO students (id, first_name, last_name, major, current_credits,grade)<br>
  VALUES (student_sequence.NEXTVAL, \'Joanne\', \'Junebug\', \'Computer Science\', 75,null);</p>

<p>INSERT INTO students (id, first_name, last_name, major, current_credits,grade)<br>
  VALUES (student_sequence.NEXTVAL, \'Manish\', \'Murgratroid\', \'Economics\', 66,null);</p>

<p>commit;</p>
</div>

<p> </p>

<p><strong>2.查看相应数据</strong></p>

<p> </p>

<div class=\"codetitle\">
<span><u></u></span> 代码如下:</div>

<div class=\"codebody\" id=\"code36574\">
<br>
SQL> select * from students;
<p> </p>

<p>        ID FIRST_NAME           LAST_NAME            MAJOR                          CURRENT_CREDITS GR<br>
---------- -------------------- -------------------- ------------------------------ --------------- --<br>
     10000 Scott                Smith                Computer Science                            98<br>
     10001 Margaret             Mason                History                                     88<br>
     10002 Joanne               Junebug              Computer Science                            75<br>
     10003 Manish               Murgratroid          Economics                                   66</p>
</div>

<p> </p>

<p><strong>3.更新语句</strong></p>

<p> </p>

<div class=\"codetitle\">
<span><u></u></span> 代码如下:</div>

<div class=\"codebody\" id=\"code14548\">
<br>
update students<br>
set grade = (<br>
select grade from<br>
(<br>
select id,<br>
case when current_credits > 90 then \'a\'<br>
     when current_credits > 80 then \'b\'<br>
     when current_credits > 70 then \'c\'<br>
else \'d\' end grade<br>
from students<br>
) a<br>
where a.id = students.id<br>
)<br>
/</div>

<p> </p>

<p><strong>4.更新后结果</strong></p>

<p> </p>

<div class=\"codetitle\">
<span><u></u></span> 代码如下:</div>

<div class=\"codebody\" id=\"code54069\">
<br>
SQL> select * from students;
<p> </p>

<p>        ID FIRST_NAME           LAST_NAME            MAJOR                          CURRENT_CREDITS GR<br>
---------- -------------------- -------------------- ------------------------------ --------------- --<br>
     10000 Scott                Smith                Computer Science                            98 a<br>
     10001 Margaret             Mason                History                                     88 b<br>
     10002 Joanne               Junebug              Computer Science                            75 c<br>
     10003 Manish               Murgratroid          Economics                                   66 d</p>
</div>

<p>看完后大家知道如何使用Oracle case函数了吗？人生就是一个不断学习的过程，在这个过程中信息管理部技术频道就是大家的帮手，我们看在信息管理部网学习到很多有趣的知识。</p>
						</div>
					',`creator`='信息管理部',`created_at`='2019-12-13 08:52:32',`updated_at`='2019-12-13 08:52:32',`click`='1' WHERE `id` = 33 [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000017s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000031s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008277s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008299s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000523s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000539s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000649s ]
INFO: [ app_end ] --END-- [ RunTime:0.000665s ]

[ 2019-12-13T08:59:09+08:00 ] ::1 /Home/Index/ShowDetail?id=33
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000592s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001401s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001495s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` WHERE `id` = 33 LIMIT 1   [ RunTime:0.0004s ]

[ 2019-12-13T08:59:18+08:00 ] ::1 /Home/Index/detail?id=3
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000472s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000542s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000557s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` WHERE `id` = 3 LIMIT 1   [ RunTime:0.0004s ]
SQL: UPDATE `articles` SET `origin_url`='https://js.aizhan.com/qukuailian/10141.html',`title`='什么是去中心化？比特币是如何实现去中心化的？',`text`='<div class=\"container\">
							
<p>　　这篇文章，信息管理部技术小编会通过对比三种数字货币的形式引出“什么是<span style=\"color:#002FD9\">去中心化</span>”，并展示了<span style=\"color:#002FD9\">比特币</span>在去中心化方面的表现如何，最后，向大家阐述了比特币去中心化的原理。</p>

<p>　　中本聪解决了自己定义的难题“点对点的电子现金”，在这个过程中，他“发明”了<span style=\"color:#002FD9\">区块链</span>技术。比特币系统融合密码学、博弈论和软件工程等三个领域的技术与理论，区块链技术是已有技术巧妙地组合形成的创新。中本聪不是凭空解决“点对点电子现金”这个难题的，他沿着前人的足迹前进，只是他完成了最后一跃。</p>

<p>　　接下来，我们来具体地看中本聪是如何解决他定义的难题，创造一个在数字世界中做价值表示的事物的。在讨论中我们会特别关注，他是如何实现“去中心化”的?</p>

<p>　　什么是去中心化?</p>

<p>　　在说“货币”时，我们讨论的是数字世界中的价值表示。在互联网上的数字世界中，人们曾设计出各种各样的电子现金或数字现金方案，在为《区块链：技术驱动金融》一书撰写前言时，杰里米·克拉克收集了约 100 种支付系统。他写道：“在通往比特币的道路上，布满了无数失败的尝试。”在所列的各种系统中，他认为大众所知道的只有 PayPal。当然，在移动支付超前发展的中国，我们都很熟悉支付宝与微信支付。</p>

<p>　　一直以来，数字世界中的“货币”有三种形式(见下图)：</p>

<p>　　中心化的在线支付;</p>

<p>　　中心化的计算机点数或互联网积分;</p>

<p>　　去中心化的电子现金。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"数字世界中“货币”的三种路径\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900276610.gif\" width=\"550\"></p>

<p style=\"text-align: center;\">　　图1：数字世界中“货币”的三种形式</p>

<p>　　第一种形式：中心化的在线支付</p>

<p>　　我们常用的 PayPal、支付宝、微信支付都是中心化的在线支付，在这些支付系统中流转的是映射到数字世界的各国的法定货币(也称法币)。</p>

<p>　　法币(fiat money)是“法定货币”或“法偿币”的简称，它依靠政府的法令成为合法流通的货币。法币是各国政府发行的纸币，发行者没有将货币兑现为实物(如黄金)的义务。</p>

<p>　　法定货币的价值来自拥有者相信货币将来能维持其购买力，本身并无内在价值。历史上，在政府强制规定纸钞为法定货币之前，大多数流通的货币具有一定的内在价值，例如金币、银两，它们又被称为商品货币(commodity money)。</p>

<p>　　在布雷顿森林体系中，35美元能兑换1盎司(1盎司=28.35克)黄金，因而当时的美元不是法币。之后，当美元与黄金脱钩后，美元就变成了法币。</p>

<p>　　第二种形式：中心化的计算机点数或互联网积分</p>

<p>　　中心化的互联网积分/计算机点数是指 Q 币、游戏币、航空里程等，它们还曾有一个更为大众所熟知的名字——虚拟货币。通常，它们不与物理世界的法币对应，而是由商业公司中心化发行，仅可以在一家公司的体系中使用。</p>

<p>　　第三种形式：去中心化的电子现金</p>

<p>　　去中心化的电子现金已经被计算机密码学家探索了多年，沿着前人的探索路径，中本聪最终将这条路径变成了现实。中本聪设计和开发了比特币系统，并催生了众多加密数字货币和区块链技术项目。</p>

<p>　　下面来分别看看这三种形式。三种形式与物理世界中的现金的对比如图 2 所示。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"一组对比：是否去中心化与是否自行发行\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900292385.gif\" width=\"500\"></p>

<p style=\"text-align: center;\">　　图2：一组对比：是否去中心化与是否自行发行</p>

<p>　　第一种形式：PayPal、支付宝、微信支付</p>

<p>　　现在，被互联网用户广泛使用的主流支付系统是 PayPal、支付宝，以及后来出现的移动支付 Square、微信支付等。这些第三方在线支付系统依赖于物理世界中的货币系统与金融体系，它们在数字世界中为用户提供支付、转账等服务。在使用它们时，我们所用的钱是物理世界中的法币，如美元、人民币、欧元、日元等，钱从银行账户中被映射到网络支付账户中。</p>

<p>　　过去，信用卡、储蓄卡等塑料卡片实现了纸币现金的数字化，把纸币现金变成了卡片账户中的数字现金。现在，在线支付系统将信用卡和储蓄卡的功能转移到互联网数字世界中来了。</p>

<p>　　在这些系统中流转的都是与法币一一对应的电子现金，变化的仅仅是“账户”，而非“货币”。这些系统所起的作用是，在账户和货币上连接物理世界与数字世界。</p>

<p>　　这些系统都是中心化的。它们背后所依赖的传统金融系统是中心化的，法币是由各国央行发行的。它们自身是完全中心化的，由单一机构运转网络支付系统。它们在交易中担任中心化的中介角色，进行账户的记账，是用户间数字现金流通的中心。当两个用户进行转账时，在线支付系统在中间担任可信第三方的中介角色。这就是为什么称之为“中心化的电子现金”。</p>

<p>　　第二种形式：Q币、游戏币等互联网积分或计算机点数</p>

<p>　　在互联网上，除了在线支付系统之外，还有一种过去常被称为“虚拟货币”的货币现象。</p>

<p>　　比如，用户可以用人民币购买腾讯公司的Q币，腾讯自称它是“统计代码”。Q币可以在腾讯的产品如QQ即时通信工具、网络游戏、音乐文学等中使用，兑换各种在线服务。</p>

<p>　　关于“什么是Q币，它有什么用处”的问题，腾讯网站上的解释是，Q币是用于计算机用户使用腾讯网站的各种增值服务的种类、数量或时间等的一种统计代码，并非任何代币、票券，不能用于除腾讯网站增值服务以外的任何商品或服务。</p>

<p>　　又比如，在游戏中，用户可以付钱购买道具，也可以通过战斗赢取游戏币。这些道具和游戏币的形态与价值各不相同，在一个游戏中都很难确定价格、进行兑换，在多个游戏之间几乎不可互换。当然，游戏玩家还是可以找到办法进行交换，在一定条件下甚至还可以将它们变现换回法币，例如，曾流行的“游戏打金”就是指有些玩家专门在游戏中获得金币，然后卖出获得现金收入。</p>

<p>　　正如腾讯用“统计代码”的说法所表明的，Q币等是中心化机构(通常是一家公司)发行与管理的互联网积分或计算机点数。它们是中心化的，其发行和交易都是中心化的。</p>

<p>　　一般来说，在不需要用户付费购买时，它们常被称为“积分”，在需要用户付费购买时，它们常被称为“点数”。</p>

<p>　　但近年来出现了很有意思的混合产物。在打车软件中，用户可以存入现金，如存 100 元得 150 元;也可以介绍其他人成为打车软件的用户从而获得奖励，如介绍一个新用户双方各获得 50 元余额。在这种情况下，在打车软件钱包中的余额就变成了一定程度上的点数与积分的混合物。在打车软件钱包中的余额一般是不能提现的，也不能在用户之间直接转账，至多只能帮其他用户代付车费。</p>

<p>　　我们还可以进一步对比在线支付系统和计算机点数。</p>

<p>　　一个视角是，它们是否映射物理世界中的货币。在线支付系统是映射物理世界中的货币的，电子现金价值就是货币的价值。而对于游戏迷来说，游戏币、游戏道具通常是不映射物理世界中的货币的。对游戏迷而言，游戏道具既有价值也有价格;对其他人而言，游戏道具可能毫无价值。在线支付系统与法币无缝连接，而这些互联网积分/计算机点数系统只与现实世界中的货币系统有很少的连接点，并且由于法律、商业等方面的原因，一般没有畅通的渠道将它们兑换回法币。</p>

<p>　　另一个是视角是“电子现金”或“点数/积分”是如何发行的?与在线支付系统不同，点数/积分是由一家公司自行发行的，用户付费获得点数，可被认为是向这家公司购买一种数字商品，用户稍后可用这些点数兑换成该公司体系内的虚拟商品或服务。</p>

<p>　　直到最近，与现实世界相连的在线支付系统和不与现实世界相连的互联网积分/计算机点数都是互联网中的主流。变化始于比特币的出现。</p>

<p>　　第三种形式：去中心化的电子现金</p>

<p>　　在这两个主流之外，一直还有着另外一种探索：能不能创造一种完全去中心化的点对点电子现金?其中最终极的设想是，在数字世界中，货币的发行和交易都不需要中心化机构介入，是由计算机自动执行的：在发行时，无须类似各国央行的中心化机构;两个人在相互转移电子现金时，也无须中心化机构的参与。</p>

<p>　　按前面的对比表格，这种理想化的去中心化的电子现金几乎在每个方面都试图进行突破：不映射线下的货币，而在数字世界中自行发行;发行去中心化，不需要一个类似中央银行的角色;像物理世界中的现金交易一样，交易无须中介介入。</p>

<p>　　这个问题很难，因为它的要求与数字世界中的技术基础设施的能力相悖。其中重要的一点是，在物理世界中，表示价值的现金纸币是不能复制的。但在数字世界中，数字化文档是可以复制的，每一个复制出来的文档都一模一样。因而过去在数字世界中，要用数字文件表示价值(比如表示一笔电子现金)，我们需要一个中心化机构来确保数字文件是唯一的。假设这笔电子现金现在属于我，当我把它转给你时，我们需要一个中介来协助记录所有权的变更，我不能直接把数字文件复制给你。</p>

<p>　　计算机密码学家们探索的是，在无须中心化介入的情况下，如何通过密码学的方法，用可复制的数字文件来代表价值。</p>

<p>　　这是一个漫长的探索过程，其开端甚至比互联网商业化都还早，最早可追溯到 20 世纪 80 年代。总的来说，由于这种探索是基于加密技术的，因此各种去中心化数字现金也被称为加密数字货币(crypto-currency)，其中 crypto 是密码学(cryptography)的词根。</p>

<p>　　最终在 2008 年，匿名的中本聪在密码朋克的邮件列表中发布了比特币的设计。他发明的比特币系统几乎集合了第三类探索的所有智慧结晶，他又加入了新的创新，最终在电子现金的发行和交易上都实现了去中心化。</p>

<p>　　正如我们所知，中本聪不只是设计和实现了这个最理想化的去中心化电子现金，他还“发明”了区块链技术。区块链的价值表示和价值转移功能让它可能成为新一代互联网的技术基础。</p>

<p>　　比特币实现了极致的“去中心化”</p>

<p>　　对照前文图表，与现有中心化的电子现金系统(在线支付系统)相比，比特币是与之完全相反的：</p>

<p>　　在线支付系统的货币发行是中心化的，比特币的发行是去中心化的;</p>

<p>　　在线支付系统的货币流动是中心化的，比特币的交易是去中心化的;</p>

<p>　　在线支付系统映射物理世界中的货币，比特币不映射任何现有的货币;</p>

<p>　　在线支付系统自己不进行货币的发行，比特币是在数字世界中凭空发行出来的。</p>

<p>　　在去中心化的程度上，比特币系统达到了极致。去中心化的初级阶段是自动化(automatic)，即根据人设定的规则自动运行，而去中心化的高级阶段是自治(autonomous)，也就是完全自治、自发。而比特币系统作为一个电子现金系统，达到了极致的去中心化状态(见图 3)：</p>

<p>　　作为一个货币应用，它不只交易是自治的，它的发行也是自治的。</p>

<p>　　作为一个计算机网络，它是完全去中心化的，而不仅仅是分布式网络。</p>

<p>　　作为一个组织，它是完全的社群自治，不需要有一个领导者居中协调。</p>

<p>　　去中心化处于区块链的思维模式的最内核，而比特币实现了极致的去中心化。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"比特币去中心化的层次\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900259362.gif\" width=\"420\"></p>

<p style=\"text-align: center;\">　　图3：比特币去中心化的层次</p>

<p>　　不过，之后在发展区块链技术和将之应用的过程中，我们又不得不从最极致的理想状态往实用方向调整，比如：</p>

<p>　　现在多数区块链项目都是由基金会管理的。以太坊是由创始人维塔利克·布特林(人称“V神”)和以太坊基金会居中协调的，而不像比特币社区那样是完全自治的。</p>

<p>　　常在金融系统中使用的联盟链，以及部分节点数量不多的基础公链，如小蚁(NEO)、EOS，更应被视为分布式网络，没有实现完全的去中心网络。</p>

<p>　　通过以太坊发行基于ERC20标准的通证，通证的发行规则是由项目方确定的，在运行过程中会酌情更改规则。它们的发行不是自动的或自治的。</p>

<p>　　常被视为区块链 3.0代表的 EOS 在智能合约部分引入了李嘉图合约和社区仲裁机制，也即交易部分不再是完全交给机器自动执行，在需要时人可以参与和干涉。</p>

<p>　　我们反复讨论比特币系统的设计，是因为它早已经把最极致的情况展现在所有人面前。而在将区块链技术落地应用的过程中，从最极致的去中心化往实用主义方向调整并不是倒退，而是事物发展的必然过程。</p>

<p>　　比特币是如何实现去中心化的?</p>

<p>　　那么，比特币系统具体是如何实现极致的去中心化的呢?</p>

<p>　　在比特币白皮书《比特币：一个点对点电子现金系统》中，中本聪详细地解释了他是如何设计这个系统的。在其中，他确立了此后所有区块链系统的主要设计原则。</p>

<p>　　一个真正的点对点电子现金应该允许从发起方直接在线支付给对方，而不需要通过第三方的金融机构。</p>

<p>　　现有的数字签名技术虽然提供了部分解决方案，但如果还需要经过一个可信的第三方机构来防止(电子现金的)“双重支付”，那就丧失了(电子现金带来的)主要好处。</p>

<p>　　针对电子现金会出现的“双重支付”问题，我们用点对点的网络技术提供了一个解决方案。</p>

<p>　　该网络给交易记录打上时间戳(timestamp)，对交易记录进行哈希散列处理后，将之并入一个不断增长的链条中，这个链条由哈希散列过的工作量证明(hash-based proof-of-work)组成，如果不重做工作量证明，以此形成的记录无法被改变。</p>

<p>　　最长的链条不仅仅是作为被观察到的事件序列的证明，并且证明它是由最大的CPU处理能力池产生的。只要掌控多数CPU处理能力的计算机节点不(与攻击者)联合起来攻击网络本身，它们将生成最长的链条，把攻击者甩在后面。</p>

<p>　　这个网络本身仅需要最简单的结构。信息尽最大努力在全网广播即可。节点可以随时离开和重新加入网络，只需(在重新加入时)将最长的工作量证明链条作为在该节点离线期间发生的交易的证明即可。</p>

<p>　　威廉·穆贾雅在《商业区块链》一书中对比特币白皮书摘要进行了分析，他总结了四个要点：</p>

<p>　　点对点电子交易;</p>

<p>　　不需要金融机构;</p>

<p>　　加密证据而不是中心化的信用;</p>

<p>　　信用存在于网络，而不是某个中心机构。</p>

<p>　　而从这个摘要中，我们提炼出了比特币系统设计的五个要点(见图 4)：比特币的区块链系统是由分布式账本(即狭义的区块链)和去中心网络(点对点网络)组成的，形成链条的方式是工作量证明共识机制。最长链是由网络中的算力共同决定的，因而它是可信的，节点离开和加入依据的是最长链是可信的这一原则。这些组合起来形成了比特币系统。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"比特币系统设计的五个要点\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900386883.gif\" width=\"450\"></p>

<p>　　图4：比特币系统设计的五个要点</p>

<p>　　1) 去中心化的点对点电子现金系统</p>

<p>　　比特币要做的是一个“点对点的电子现金系统”，发送方和接收方直接交易，它们之间不需要中介机构的介入。</p>

<p>　　要去掉可信第三方等中介机构，就需要解决“双花问题”。在摘要中，中本聪给出了点对点网络的解决方案，并介绍了这个方案的核心——区块链。他并没有提到区块链(blockchain)这个词，但在论文中分别提到了区块(block)和链(chain)这两个概念。</p>

<p>　　2) 分布式账本</p>

<p>　　比特币的区块链是基于工作量证明形成的带时间戳、存储数据的数据块和由哈希指针连接成的链条。</p>

<p>　　这个链条或者说账本以分布式的方式存储在比特币网络的各个节点上，因而也被称为分布式账本。</p>

<p>　　3) 工作量证明</p>

<p>　　比特币网络中的节点按照规则进行加密哈希计算，以竞争获得生成新区块的权利。节点在竞争获胜后就获得记账权，它生成区块成为最新区块后，就获得与新区块对应的挖矿奖励。</p>

<p>　　工作量证明也是区块链账本的安全机制。如果不重做“工作量证明”所需的大量计算则此链条不可修改，这一共识机制保证了区块链上的数据的可靠性。</p>

<p>　　4) 最长链原则</p>

<p>　　在任何时刻，最长的链条是所有人都接受的最终记录。</p>

<p>　　由于最长链是由网络中的主要算力完成的，因而只要它们不都与攻击者合作，那么它们生成的最长链就是可信的。这个原则被称为“最长链原则”。</p>

<p>　　5) 去中心网络</p>

<p>　　比特币的去中心网络的架构非常简洁，本身需要的基础设施很少。它可以在互联网网络上运行。计算机节点可以随时离开或加入这个去中心网络，在加入时它们只需遵守最长链原则即可。</p>

<p>　　以上就是，什么是去中心化？比特币是如何实现去中心化的？的全部内容啦，相信对于去中心化，你已经清楚明了，但学无止境嘛，跟随信息管理部技术小编一起再深入学习吧，关注下信息管理部技术频道，我们一起进步！</p>
						</div>
					',`creator`='信息管理部',`created_at`='2019-12-12 14:47:04',`updated_at`='2019-12-12 14:47:04',`click`='1' WHERE `id` = 3 [ RunTime:0.0007s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000016s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000031s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007496s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007515s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000453s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000468s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000648s ]
INFO: [ app_end ] --END-- [ RunTime:0.000662s ]

[ 2019-12-13T08:59:18+08:00 ] ::1 /Home/Index/ShowDetail?id=3
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000601s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000697s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000716s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0010s ]
SQL: SELECT * FROM `articles` WHERE `id` = 3 LIMIT 1   [ RunTime:0.0004s ]

[ 2019-12-13T09:00:21+08:00 ] ::1 /Home/Index/detail?id=3
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000597s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000721s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000737s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` WHERE `id` = 3 LIMIT 1   [ RunTime:0.0004s ]
SQL: UPDATE `articles` SET `origin_url`='https://js.aizhan.com/qukuailian/10141.html',`title`='什么是去中心化？比特币是如何实现去中心化的？',`text`='<div class=\"container\">
							
<p>　　这篇文章，信息管理部技术小编会通过对比三种数字货币的形式引出“什么是<span style=\"color:#002FD9\">去中心化</span>”，并展示了<span style=\"color:#002FD9\">比特币</span>在去中心化方面的表现如何，最后，向大家阐述了比特币去中心化的原理。</p>

<p>　　中本聪解决了自己定义的难题“点对点的电子现金”，在这个过程中，他“发明”了<span style=\"color:#002FD9\">区块链</span>技术。比特币系统融合密码学、博弈论和软件工程等三个领域的技术与理论，区块链技术是已有技术巧妙地组合形成的创新。中本聪不是凭空解决“点对点电子现金”这个难题的，他沿着前人的足迹前进，只是他完成了最后一跃。</p>

<p>　　接下来，我们来具体地看中本聪是如何解决他定义的难题，创造一个在数字世界中做价值表示的事物的。在讨论中我们会特别关注，他是如何实现“去中心化”的?</p>

<p>　　什么是去中心化?</p>

<p>　　在说“货币”时，我们讨论的是数字世界中的价值表示。在互联网上的数字世界中，人们曾设计出各种各样的电子现金或数字现金方案，在为《区块链：技术驱动金融》一书撰写前言时，杰里米·克拉克收集了约 100 种支付系统。他写道：“在通往比特币的道路上，布满了无数失败的尝试。”在所列的各种系统中，他认为大众所知道的只有 PayPal。当然，在移动支付超前发展的中国，我们都很熟悉支付宝与微信支付。</p>

<p>　　一直以来，数字世界中的“货币”有三种形式(见下图)：</p>

<p>　　中心化的在线支付;</p>

<p>　　中心化的计算机点数或互联网积分;</p>

<p>　　去中心化的电子现金。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"数字世界中“货币”的三种路径\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900276610.gif\" width=\"550\"></p>

<p style=\"text-align: center;\">　　图1：数字世界中“货币”的三种形式</p>

<p>　　第一种形式：中心化的在线支付</p>

<p>　　我们常用的 PayPal、支付宝、微信支付都是中心化的在线支付，在这些支付系统中流转的是映射到数字世界的各国的法定货币(也称法币)。</p>

<p>　　法币(fiat money)是“法定货币”或“法偿币”的简称，它依靠政府的法令成为合法流通的货币。法币是各国政府发行的纸币，发行者没有将货币兑现为实物(如黄金)的义务。</p>

<p>　　法定货币的价值来自拥有者相信货币将来能维持其购买力，本身并无内在价值。历史上，在政府强制规定纸钞为法定货币之前，大多数流通的货币具有一定的内在价值，例如金币、银两，它们又被称为商品货币(commodity money)。</p>

<p>　　在布雷顿森林体系中，35美元能兑换1盎司(1盎司=28.35克)黄金，因而当时的美元不是法币。之后，当美元与黄金脱钩后，美元就变成了法币。</p>

<p>　　第二种形式：中心化的计算机点数或互联网积分</p>

<p>　　中心化的互联网积分/计算机点数是指 Q 币、游戏币、航空里程等，它们还曾有一个更为大众所熟知的名字——虚拟货币。通常，它们不与物理世界的法币对应，而是由商业公司中心化发行，仅可以在一家公司的体系中使用。</p>

<p>　　第三种形式：去中心化的电子现金</p>

<p>　　去中心化的电子现金已经被计算机密码学家探索了多年，沿着前人的探索路径，中本聪最终将这条路径变成了现实。中本聪设计和开发了比特币系统，并催生了众多加密数字货币和区块链技术项目。</p>

<p>　　下面来分别看看这三种形式。三种形式与物理世界中的现金的对比如图 2 所示。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"一组对比：是否去中心化与是否自行发行\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900292385.gif\" width=\"500\"></p>

<p style=\"text-align: center;\">　　图2：一组对比：是否去中心化与是否自行发行</p>

<p>　　第一种形式：PayPal、支付宝、微信支付</p>

<p>　　现在，被互联网用户广泛使用的主流支付系统是 PayPal、支付宝，以及后来出现的移动支付 Square、微信支付等。这些第三方在线支付系统依赖于物理世界中的货币系统与金融体系，它们在数字世界中为用户提供支付、转账等服务。在使用它们时，我们所用的钱是物理世界中的法币，如美元、人民币、欧元、日元等，钱从银行账户中被映射到网络支付账户中。</p>

<p>　　过去，信用卡、储蓄卡等塑料卡片实现了纸币现金的数字化，把纸币现金变成了卡片账户中的数字现金。现在，在线支付系统将信用卡和储蓄卡的功能转移到互联网数字世界中来了。</p>

<p>　　在这些系统中流转的都是与法币一一对应的电子现金，变化的仅仅是“账户”，而非“货币”。这些系统所起的作用是，在账户和货币上连接物理世界与数字世界。</p>

<p>　　这些系统都是中心化的。它们背后所依赖的传统金融系统是中心化的，法币是由各国央行发行的。它们自身是完全中心化的，由单一机构运转网络支付系统。它们在交易中担任中心化的中介角色，进行账户的记账，是用户间数字现金流通的中心。当两个用户进行转账时，在线支付系统在中间担任可信第三方的中介角色。这就是为什么称之为“中心化的电子现金”。</p>

<p>　　第二种形式：Q币、游戏币等互联网积分或计算机点数</p>

<p>　　在互联网上，除了在线支付系统之外，还有一种过去常被称为“虚拟货币”的货币现象。</p>

<p>　　比如，用户可以用人民币购买腾讯公司的Q币，腾讯自称它是“统计代码”。Q币可以在腾讯的产品如QQ即时通信工具、网络游戏、音乐文学等中使用，兑换各种在线服务。</p>

<p>　　关于“什么是Q币，它有什么用处”的问题，腾讯网站上的解释是，Q币是用于计算机用户使用腾讯网站的各种增值服务的种类、数量或时间等的一种统计代码，并非任何代币、票券，不能用于除腾讯网站增值服务以外的任何商品或服务。</p>

<p>　　又比如，在游戏中，用户可以付钱购买道具，也可以通过战斗赢取游戏币。这些道具和游戏币的形态与价值各不相同，在一个游戏中都很难确定价格、进行兑换，在多个游戏之间几乎不可互换。当然，游戏玩家还是可以找到办法进行交换，在一定条件下甚至还可以将它们变现换回法币，例如，曾流行的“游戏打金”就是指有些玩家专门在游戏中获得金币，然后卖出获得现金收入。</p>

<p>　　正如腾讯用“统计代码”的说法所表明的，Q币等是中心化机构(通常是一家公司)发行与管理的互联网积分或计算机点数。它们是中心化的，其发行和交易都是中心化的。</p>

<p>　　一般来说，在不需要用户付费购买时，它们常被称为“积分”，在需要用户付费购买时，它们常被称为“点数”。</p>

<p>　　但近年来出现了很有意思的混合产物。在打车软件中，用户可以存入现金，如存 100 元得 150 元;也可以介绍其他人成为打车软件的用户从而获得奖励，如介绍一个新用户双方各获得 50 元余额。在这种情况下，在打车软件钱包中的余额就变成了一定程度上的点数与积分的混合物。在打车软件钱包中的余额一般是不能提现的，也不能在用户之间直接转账，至多只能帮其他用户代付车费。</p>

<p>　　我们还可以进一步对比在线支付系统和计算机点数。</p>

<p>　　一个视角是，它们是否映射物理世界中的货币。在线支付系统是映射物理世界中的货币的，电子现金价值就是货币的价值。而对于游戏迷来说，游戏币、游戏道具通常是不映射物理世界中的货币的。对游戏迷而言，游戏道具既有价值也有价格;对其他人而言，游戏道具可能毫无价值。在线支付系统与法币无缝连接，而这些互联网积分/计算机点数系统只与现实世界中的货币系统有很少的连接点，并且由于法律、商业等方面的原因，一般没有畅通的渠道将它们兑换回法币。</p>

<p>　　另一个是视角是“电子现金”或“点数/积分”是如何发行的?与在线支付系统不同，点数/积分是由一家公司自行发行的，用户付费获得点数，可被认为是向这家公司购买一种数字商品，用户稍后可用这些点数兑换成该公司体系内的虚拟商品或服务。</p>

<p>　　直到最近，与现实世界相连的在线支付系统和不与现实世界相连的互联网积分/计算机点数都是互联网中的主流。变化始于比特币的出现。</p>

<p>　　第三种形式：去中心化的电子现金</p>

<p>　　在这两个主流之外，一直还有着另外一种探索：能不能创造一种完全去中心化的点对点电子现金?其中最终极的设想是，在数字世界中，货币的发行和交易都不需要中心化机构介入，是由计算机自动执行的：在发行时，无须类似各国央行的中心化机构;两个人在相互转移电子现金时，也无须中心化机构的参与。</p>

<p>　　按前面的对比表格，这种理想化的去中心化的电子现金几乎在每个方面都试图进行突破：不映射线下的货币，而在数字世界中自行发行;发行去中心化，不需要一个类似中央银行的角色;像物理世界中的现金交易一样，交易无须中介介入。</p>

<p>　　这个问题很难，因为它的要求与数字世界中的技术基础设施的能力相悖。其中重要的一点是，在物理世界中，表示价值的现金纸币是不能复制的。但在数字世界中，数字化文档是可以复制的，每一个复制出来的文档都一模一样。因而过去在数字世界中，要用数字文件表示价值(比如表示一笔电子现金)，我们需要一个中心化机构来确保数字文件是唯一的。假设这笔电子现金现在属于我，当我把它转给你时，我们需要一个中介来协助记录所有权的变更，我不能直接把数字文件复制给你。</p>

<p>　　计算机密码学家们探索的是，在无须中心化介入的情况下，如何通过密码学的方法，用可复制的数字文件来代表价值。</p>

<p>　　这是一个漫长的探索过程，其开端甚至比互联网商业化都还早，最早可追溯到 20 世纪 80 年代。总的来说，由于这种探索是基于加密技术的，因此各种去中心化数字现金也被称为加密数字货币(crypto-currency)，其中 crypto 是密码学(cryptography)的词根。</p>

<p>　　最终在 2008 年，匿名的中本聪在密码朋克的邮件列表中发布了比特币的设计。他发明的比特币系统几乎集合了第三类探索的所有智慧结晶，他又加入了新的创新，最终在电子现金的发行和交易上都实现了去中心化。</p>

<p>　　正如我们所知，中本聪不只是设计和实现了这个最理想化的去中心化电子现金，他还“发明”了区块链技术。区块链的价值表示和价值转移功能让它可能成为新一代互联网的技术基础。</p>

<p>　　比特币实现了极致的“去中心化”</p>

<p>　　对照前文图表，与现有中心化的电子现金系统(在线支付系统)相比，比特币是与之完全相反的：</p>

<p>　　在线支付系统的货币发行是中心化的，比特币的发行是去中心化的;</p>

<p>　　在线支付系统的货币流动是中心化的，比特币的交易是去中心化的;</p>

<p>　　在线支付系统映射物理世界中的货币，比特币不映射任何现有的货币;</p>

<p>　　在线支付系统自己不进行货币的发行，比特币是在数字世界中凭空发行出来的。</p>

<p>　　在去中心化的程度上，比特币系统达到了极致。去中心化的初级阶段是自动化(automatic)，即根据人设定的规则自动运行，而去中心化的高级阶段是自治(autonomous)，也就是完全自治、自发。而比特币系统作为一个电子现金系统，达到了极致的去中心化状态(见图 3)：</p>

<p>　　作为一个货币应用，它不只交易是自治的，它的发行也是自治的。</p>

<p>　　作为一个计算机网络，它是完全去中心化的，而不仅仅是分布式网络。</p>

<p>　　作为一个组织，它是完全的社群自治，不需要有一个领导者居中协调。</p>

<p>　　去中心化处于区块链的思维模式的最内核，而比特币实现了极致的去中心化。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"比特币去中心化的层次\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900259362.gif\" width=\"420\"></p>

<p style=\"text-align: center;\">　　图3：比特币去中心化的层次</p>

<p>　　不过，之后在发展区块链技术和将之应用的过程中，我们又不得不从最极致的理想状态往实用方向调整，比如：</p>

<p>　　现在多数区块链项目都是由基金会管理的。以太坊是由创始人维塔利克·布特林(人称“V神”)和以太坊基金会居中协调的，而不像比特币社区那样是完全自治的。</p>

<p>　　常在金融系统中使用的联盟链，以及部分节点数量不多的基础公链，如小蚁(NEO)、EOS，更应被视为分布式网络，没有实现完全的去中心网络。</p>

<p>　　通过以太坊发行基于ERC20标准的通证，通证的发行规则是由项目方确定的，在运行过程中会酌情更改规则。它们的发行不是自动的或自治的。</p>

<p>　　常被视为区块链 3.0代表的 EOS 在智能合约部分引入了李嘉图合约和社区仲裁机制，也即交易部分不再是完全交给机器自动执行，在需要时人可以参与和干涉。</p>

<p>　　我们反复讨论比特币系统的设计，是因为它早已经把最极致的情况展现在所有人面前。而在将区块链技术落地应用的过程中，从最极致的去中心化往实用主义方向调整并不是倒退，而是事物发展的必然过程。</p>

<p>　　比特币是如何实现去中心化的?</p>

<p>　　那么，比特币系统具体是如何实现极致的去中心化的呢?</p>

<p>　　在比特币白皮书《比特币：一个点对点电子现金系统》中，中本聪详细地解释了他是如何设计这个系统的。在其中，他确立了此后所有区块链系统的主要设计原则。</p>

<p>　　一个真正的点对点电子现金应该允许从发起方直接在线支付给对方，而不需要通过第三方的金融机构。</p>

<p>　　现有的数字签名技术虽然提供了部分解决方案，但如果还需要经过一个可信的第三方机构来防止(电子现金的)“双重支付”，那就丧失了(电子现金带来的)主要好处。</p>

<p>　　针对电子现金会出现的“双重支付”问题，我们用点对点的网络技术提供了一个解决方案。</p>

<p>　　该网络给交易记录打上时间戳(timestamp)，对交易记录进行哈希散列处理后，将之并入一个不断增长的链条中，这个链条由哈希散列过的工作量证明(hash-based proof-of-work)组成，如果不重做工作量证明，以此形成的记录无法被改变。</p>

<p>　　最长的链条不仅仅是作为被观察到的事件序列的证明，并且证明它是由最大的CPU处理能力池产生的。只要掌控多数CPU处理能力的计算机节点不(与攻击者)联合起来攻击网络本身，它们将生成最长的链条，把攻击者甩在后面。</p>

<p>　　这个网络本身仅需要最简单的结构。信息尽最大努力在全网广播即可。节点可以随时离开和重新加入网络，只需(在重新加入时)将最长的工作量证明链条作为在该节点离线期间发生的交易的证明即可。</p>

<p>　　威廉·穆贾雅在《商业区块链》一书中对比特币白皮书摘要进行了分析，他总结了四个要点：</p>

<p>　　点对点电子交易;</p>

<p>　　不需要金融机构;</p>

<p>　　加密证据而不是中心化的信用;</p>

<p>　　信用存在于网络，而不是某个中心机构。</p>

<p>　　而从这个摘要中，我们提炼出了比特币系统设计的五个要点(见图 4)：比特币的区块链系统是由分布式账本(即狭义的区块链)和去中心网络(点对点网络)组成的，形成链条的方式是工作量证明共识机制。最长链是由网络中的算力共同决定的，因而它是可信的，节点离开和加入依据的是最长链是可信的这一原则。这些组合起来形成了比特币系统。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"比特币系统设计的五个要点\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900386883.gif\" width=\"450\"></p>

<p>　　图4：比特币系统设计的五个要点</p>

<p>　　1) 去中心化的点对点电子现金系统</p>

<p>　　比特币要做的是一个“点对点的电子现金系统”，发送方和接收方直接交易，它们之间不需要中介机构的介入。</p>

<p>　　要去掉可信第三方等中介机构，就需要解决“双花问题”。在摘要中，中本聪给出了点对点网络的解决方案，并介绍了这个方案的核心——区块链。他并没有提到区块链(blockchain)这个词，但在论文中分别提到了区块(block)和链(chain)这两个概念。</p>

<p>　　2) 分布式账本</p>

<p>　　比特币的区块链是基于工作量证明形成的带时间戳、存储数据的数据块和由哈希指针连接成的链条。</p>

<p>　　这个链条或者说账本以分布式的方式存储在比特币网络的各个节点上，因而也被称为分布式账本。</p>

<p>　　3) 工作量证明</p>

<p>　　比特币网络中的节点按照规则进行加密哈希计算，以竞争获得生成新区块的权利。节点在竞争获胜后就获得记账权，它生成区块成为最新区块后，就获得与新区块对应的挖矿奖励。</p>

<p>　　工作量证明也是区块链账本的安全机制。如果不重做“工作量证明”所需的大量计算则此链条不可修改，这一共识机制保证了区块链上的数据的可靠性。</p>

<p>　　4) 最长链原则</p>

<p>　　在任何时刻，最长的链条是所有人都接受的最终记录。</p>

<p>　　由于最长链是由网络中的主要算力完成的，因而只要它们不都与攻击者合作，那么它们生成的最长链就是可信的。这个原则被称为“最长链原则”。</p>

<p>　　5) 去中心网络</p>

<p>　　比特币的去中心网络的架构非常简洁，本身需要的基础设施很少。它可以在互联网网络上运行。计算机节点可以随时离开或加入这个去中心网络，在加入时它们只需遵守最长链原则即可。</p>

<p>　　以上就是，什么是去中心化？比特币是如何实现去中心化的？的全部内容啦，相信对于去中心化，你已经清楚明了，但学无止境嘛，跟随信息管理部技术小编一起再深入学习吧，关注下信息管理部技术频道，我们一起进步！</p>
						</div>
					',`creator`='信息管理部',`created_at`='2019-12-12 14:47:04',`updated_at`='2019-12-12 14:47:04',`click`='2' WHERE `id` = 3 [ RunTime:0.0007s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000018s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000035s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008115s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008137s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000450s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000465s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000614s ]
INFO: [ app_end ] --END-- [ RunTime:0.000628s ]

[ 2019-12-13T09:00:21+08:00 ] ::1 /Home/Index/ShowDetail?id=3
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000605s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000688s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000718s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` WHERE `id` = 3 LIMIT 1   [ RunTime:0.0006s ]

[ 2019-12-13T09:02:35+08:00 ] ::1 /Home/Index/detail?id=3
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000588s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000737s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000759s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0013s ]
SQL: SELECT * FROM `articles` WHERE `id` = 3 LIMIT 1   [ RunTime:0.0006s ]
SQL: UPDATE `articles` SET `origin_url`='https://js.aizhan.com/qukuailian/10141.html',`title`='什么是去中心化？比特币是如何实现去中心化的？',`text`='<div class=\"container\">
							
<p>　　这篇文章，信息管理部技术小编会通过对比三种数字货币的形式引出“什么是<span style=\"color:#002FD9\">去中心化</span>”，并展示了<span style=\"color:#002FD9\">比特币</span>在去中心化方面的表现如何，最后，向大家阐述了比特币去中心化的原理。</p>

<p>　　中本聪解决了自己定义的难题“点对点的电子现金”，在这个过程中，他“发明”了<span style=\"color:#002FD9\">区块链</span>技术。比特币系统融合密码学、博弈论和软件工程等三个领域的技术与理论，区块链技术是已有技术巧妙地组合形成的创新。中本聪不是凭空解决“点对点电子现金”这个难题的，他沿着前人的足迹前进，只是他完成了最后一跃。</p>

<p>　　接下来，我们来具体地看中本聪是如何解决他定义的难题，创造一个在数字世界中做价值表示的事物的。在讨论中我们会特别关注，他是如何实现“去中心化”的?</p>

<p>　　什么是去中心化?</p>

<p>　　在说“货币”时，我们讨论的是数字世界中的价值表示。在互联网上的数字世界中，人们曾设计出各种各样的电子现金或数字现金方案，在为《区块链：技术驱动金融》一书撰写前言时，杰里米·克拉克收集了约 100 种支付系统。他写道：“在通往比特币的道路上，布满了无数失败的尝试。”在所列的各种系统中，他认为大众所知道的只有 PayPal。当然，在移动支付超前发展的中国，我们都很熟悉支付宝与微信支付。</p>

<p>　　一直以来，数字世界中的“货币”有三种形式(见下图)：</p>

<p>　　中心化的在线支付;</p>

<p>　　中心化的计算机点数或互联网积分;</p>

<p>　　去中心化的电子现金。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"数字世界中“货币”的三种路径\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900276610.gif\" width=\"550\"></p>

<p style=\"text-align: center;\">　　图1：数字世界中“货币”的三种形式</p>

<p>　　第一种形式：中心化的在线支付</p>

<p>　　我们常用的 PayPal、支付宝、微信支付都是中心化的在线支付，在这些支付系统中流转的是映射到数字世界的各国的法定货币(也称法币)。</p>

<p>　　法币(fiat money)是“法定货币”或“法偿币”的简称，它依靠政府的法令成为合法流通的货币。法币是各国政府发行的纸币，发行者没有将货币兑现为实物(如黄金)的义务。</p>

<p>　　法定货币的价值来自拥有者相信货币将来能维持其购买力，本身并无内在价值。历史上，在政府强制规定纸钞为法定货币之前，大多数流通的货币具有一定的内在价值，例如金币、银两，它们又被称为商品货币(commodity money)。</p>

<p>　　在布雷顿森林体系中，35美元能兑换1盎司(1盎司=28.35克)黄金，因而当时的美元不是法币。之后，当美元与黄金脱钩后，美元就变成了法币。</p>

<p>　　第二种形式：中心化的计算机点数或互联网积分</p>

<p>　　中心化的互联网积分/计算机点数是指 Q 币、游戏币、航空里程等，它们还曾有一个更为大众所熟知的名字——虚拟货币。通常，它们不与物理世界的法币对应，而是由商业公司中心化发行，仅可以在一家公司的体系中使用。</p>

<p>　　第三种形式：去中心化的电子现金</p>

<p>　　去中心化的电子现金已经被计算机密码学家探索了多年，沿着前人的探索路径，中本聪最终将这条路径变成了现实。中本聪设计和开发了比特币系统，并催生了众多加密数字货币和区块链技术项目。</p>

<p>　　下面来分别看看这三种形式。三种形式与物理世界中的现金的对比如图 2 所示。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"一组对比：是否去中心化与是否自行发行\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900292385.gif\" width=\"500\"></p>

<p style=\"text-align: center;\">　　图2：一组对比：是否去中心化与是否自行发行</p>

<p>　　第一种形式：PayPal、支付宝、微信支付</p>

<p>　　现在，被互联网用户广泛使用的主流支付系统是 PayPal、支付宝，以及后来出现的移动支付 Square、微信支付等。这些第三方在线支付系统依赖于物理世界中的货币系统与金融体系，它们在数字世界中为用户提供支付、转账等服务。在使用它们时，我们所用的钱是物理世界中的法币，如美元、人民币、欧元、日元等，钱从银行账户中被映射到网络支付账户中。</p>

<p>　　过去，信用卡、储蓄卡等塑料卡片实现了纸币现金的数字化，把纸币现金变成了卡片账户中的数字现金。现在，在线支付系统将信用卡和储蓄卡的功能转移到互联网数字世界中来了。</p>

<p>　　在这些系统中流转的都是与法币一一对应的电子现金，变化的仅仅是“账户”，而非“货币”。这些系统所起的作用是，在账户和货币上连接物理世界与数字世界。</p>

<p>　　这些系统都是中心化的。它们背后所依赖的传统金融系统是中心化的，法币是由各国央行发行的。它们自身是完全中心化的，由单一机构运转网络支付系统。它们在交易中担任中心化的中介角色，进行账户的记账，是用户间数字现金流通的中心。当两个用户进行转账时，在线支付系统在中间担任可信第三方的中介角色。这就是为什么称之为“中心化的电子现金”。</p>

<p>　　第二种形式：Q币、游戏币等互联网积分或计算机点数</p>

<p>　　在互联网上，除了在线支付系统之外，还有一种过去常被称为“虚拟货币”的货币现象。</p>

<p>　　比如，用户可以用人民币购买腾讯公司的Q币，腾讯自称它是“统计代码”。Q币可以在腾讯的产品如QQ即时通信工具、网络游戏、音乐文学等中使用，兑换各种在线服务。</p>

<p>　　关于“什么是Q币，它有什么用处”的问题，腾讯网站上的解释是，Q币是用于计算机用户使用腾讯网站的各种增值服务的种类、数量或时间等的一种统计代码，并非任何代币、票券，不能用于除腾讯网站增值服务以外的任何商品或服务。</p>

<p>　　又比如，在游戏中，用户可以付钱购买道具，也可以通过战斗赢取游戏币。这些道具和游戏币的形态与价值各不相同，在一个游戏中都很难确定价格、进行兑换，在多个游戏之间几乎不可互换。当然，游戏玩家还是可以找到办法进行交换，在一定条件下甚至还可以将它们变现换回法币，例如，曾流行的“游戏打金”就是指有些玩家专门在游戏中获得金币，然后卖出获得现金收入。</p>

<p>　　正如腾讯用“统计代码”的说法所表明的，Q币等是中心化机构(通常是一家公司)发行与管理的互联网积分或计算机点数。它们是中心化的，其发行和交易都是中心化的。</p>

<p>　　一般来说，在不需要用户付费购买时，它们常被称为“积分”，在需要用户付费购买时，它们常被称为“点数”。</p>

<p>　　但近年来出现了很有意思的混合产物。在打车软件中，用户可以存入现金，如存 100 元得 150 元;也可以介绍其他人成为打车软件的用户从而获得奖励，如介绍一个新用户双方各获得 50 元余额。在这种情况下，在打车软件钱包中的余额就变成了一定程度上的点数与积分的混合物。在打车软件钱包中的余额一般是不能提现的，也不能在用户之间直接转账，至多只能帮其他用户代付车费。</p>

<p>　　我们还可以进一步对比在线支付系统和计算机点数。</p>

<p>　　一个视角是，它们是否映射物理世界中的货币。在线支付系统是映射物理世界中的货币的，电子现金价值就是货币的价值。而对于游戏迷来说，游戏币、游戏道具通常是不映射物理世界中的货币的。对游戏迷而言，游戏道具既有价值也有价格;对其他人而言，游戏道具可能毫无价值。在线支付系统与法币无缝连接，而这些互联网积分/计算机点数系统只与现实世界中的货币系统有很少的连接点，并且由于法律、商业等方面的原因，一般没有畅通的渠道将它们兑换回法币。</p>

<p>　　另一个是视角是“电子现金”或“点数/积分”是如何发行的?与在线支付系统不同，点数/积分是由一家公司自行发行的，用户付费获得点数，可被认为是向这家公司购买一种数字商品，用户稍后可用这些点数兑换成该公司体系内的虚拟商品或服务。</p>

<p>　　直到最近，与现实世界相连的在线支付系统和不与现实世界相连的互联网积分/计算机点数都是互联网中的主流。变化始于比特币的出现。</p>

<p>　　第三种形式：去中心化的电子现金</p>

<p>　　在这两个主流之外，一直还有着另外一种探索：能不能创造一种完全去中心化的点对点电子现金?其中最终极的设想是，在数字世界中，货币的发行和交易都不需要中心化机构介入，是由计算机自动执行的：在发行时，无须类似各国央行的中心化机构;两个人在相互转移电子现金时，也无须中心化机构的参与。</p>

<p>　　按前面的对比表格，这种理想化的去中心化的电子现金几乎在每个方面都试图进行突破：不映射线下的货币，而在数字世界中自行发行;发行去中心化，不需要一个类似中央银行的角色;像物理世界中的现金交易一样，交易无须中介介入。</p>

<p>　　这个问题很难，因为它的要求与数字世界中的技术基础设施的能力相悖。其中重要的一点是，在物理世界中，表示价值的现金纸币是不能复制的。但在数字世界中，数字化文档是可以复制的，每一个复制出来的文档都一模一样。因而过去在数字世界中，要用数字文件表示价值(比如表示一笔电子现金)，我们需要一个中心化机构来确保数字文件是唯一的。假设这笔电子现金现在属于我，当我把它转给你时，我们需要一个中介来协助记录所有权的变更，我不能直接把数字文件复制给你。</p>

<p>　　计算机密码学家们探索的是，在无须中心化介入的情况下，如何通过密码学的方法，用可复制的数字文件来代表价值。</p>

<p>　　这是一个漫长的探索过程，其开端甚至比互联网商业化都还早，最早可追溯到 20 世纪 80 年代。总的来说，由于这种探索是基于加密技术的，因此各种去中心化数字现金也被称为加密数字货币(crypto-currency)，其中 crypto 是密码学(cryptography)的词根。</p>

<p>　　最终在 2008 年，匿名的中本聪在密码朋克的邮件列表中发布了比特币的设计。他发明的比特币系统几乎集合了第三类探索的所有智慧结晶，他又加入了新的创新，最终在电子现金的发行和交易上都实现了去中心化。</p>

<p>　　正如我们所知，中本聪不只是设计和实现了这个最理想化的去中心化电子现金，他还“发明”了区块链技术。区块链的价值表示和价值转移功能让它可能成为新一代互联网的技术基础。</p>

<p>　　比特币实现了极致的“去中心化”</p>

<p>　　对照前文图表，与现有中心化的电子现金系统(在线支付系统)相比，比特币是与之完全相反的：</p>

<p>　　在线支付系统的货币发行是中心化的，比特币的发行是去中心化的;</p>

<p>　　在线支付系统的货币流动是中心化的，比特币的交易是去中心化的;</p>

<p>　　在线支付系统映射物理世界中的货币，比特币不映射任何现有的货币;</p>

<p>　　在线支付系统自己不进行货币的发行，比特币是在数字世界中凭空发行出来的。</p>

<p>　　在去中心化的程度上，比特币系统达到了极致。去中心化的初级阶段是自动化(automatic)，即根据人设定的规则自动运行，而去中心化的高级阶段是自治(autonomous)，也就是完全自治、自发。而比特币系统作为一个电子现金系统，达到了极致的去中心化状态(见图 3)：</p>

<p>　　作为一个货币应用，它不只交易是自治的，它的发行也是自治的。</p>

<p>　　作为一个计算机网络，它是完全去中心化的，而不仅仅是分布式网络。</p>

<p>　　作为一个组织，它是完全的社群自治，不需要有一个领导者居中协调。</p>

<p>　　去中心化处于区块链的思维模式的最内核，而比特币实现了极致的去中心化。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"比特币去中心化的层次\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900259362.gif\" width=\"420\"></p>

<p style=\"text-align: center;\">　　图3：比特币去中心化的层次</p>

<p>　　不过，之后在发展区块链技术和将之应用的过程中，我们又不得不从最极致的理想状态往实用方向调整，比如：</p>

<p>　　现在多数区块链项目都是由基金会管理的。以太坊是由创始人维塔利克·布特林(人称“V神”)和以太坊基金会居中协调的，而不像比特币社区那样是完全自治的。</p>

<p>　　常在金融系统中使用的联盟链，以及部分节点数量不多的基础公链，如小蚁(NEO)、EOS，更应被视为分布式网络，没有实现完全的去中心网络。</p>

<p>　　通过以太坊发行基于ERC20标准的通证，通证的发行规则是由项目方确定的，在运行过程中会酌情更改规则。它们的发行不是自动的或自治的。</p>

<p>　　常被视为区块链 3.0代表的 EOS 在智能合约部分引入了李嘉图合约和社区仲裁机制，也即交易部分不再是完全交给机器自动执行，在需要时人可以参与和干涉。</p>

<p>　　我们反复讨论比特币系统的设计，是因为它早已经把最极致的情况展现在所有人面前。而在将区块链技术落地应用的过程中，从最极致的去中心化往实用主义方向调整并不是倒退，而是事物发展的必然过程。</p>

<p>　　比特币是如何实现去中心化的?</p>

<p>　　那么，比特币系统具体是如何实现极致的去中心化的呢?</p>

<p>　　在比特币白皮书《比特币：一个点对点电子现金系统》中，中本聪详细地解释了他是如何设计这个系统的。在其中，他确立了此后所有区块链系统的主要设计原则。</p>

<p>　　一个真正的点对点电子现金应该允许从发起方直接在线支付给对方，而不需要通过第三方的金融机构。</p>

<p>　　现有的数字签名技术虽然提供了部分解决方案，但如果还需要经过一个可信的第三方机构来防止(电子现金的)“双重支付”，那就丧失了(电子现金带来的)主要好处。</p>

<p>　　针对电子现金会出现的“双重支付”问题，我们用点对点的网络技术提供了一个解决方案。</p>

<p>　　该网络给交易记录打上时间戳(timestamp)，对交易记录进行哈希散列处理后，将之并入一个不断增长的链条中，这个链条由哈希散列过的工作量证明(hash-based proof-of-work)组成，如果不重做工作量证明，以此形成的记录无法被改变。</p>

<p>　　最长的链条不仅仅是作为被观察到的事件序列的证明，并且证明它是由最大的CPU处理能力池产生的。只要掌控多数CPU处理能力的计算机节点不(与攻击者)联合起来攻击网络本身，它们将生成最长的链条，把攻击者甩在后面。</p>

<p>　　这个网络本身仅需要最简单的结构。信息尽最大努力在全网广播即可。节点可以随时离开和重新加入网络，只需(在重新加入时)将最长的工作量证明链条作为在该节点离线期间发生的交易的证明即可。</p>

<p>　　威廉·穆贾雅在《商业区块链》一书中对比特币白皮书摘要进行了分析，他总结了四个要点：</p>

<p>　　点对点电子交易;</p>

<p>　　不需要金融机构;</p>

<p>　　加密证据而不是中心化的信用;</p>

<p>　　信用存在于网络，而不是某个中心机构。</p>

<p>　　而从这个摘要中，我们提炼出了比特币系统设计的五个要点(见图 4)：比特币的区块链系统是由分布式账本(即狭义的区块链)和去中心网络(点对点网络)组成的，形成链条的方式是工作量证明共识机制。最长链是由网络中的算力共同决定的，因而它是可信的，节点离开和加入依据的是最长链是可信的这一原则。这些组合起来形成了比特币系统。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"比特币系统设计的五个要点\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900386883.gif\" width=\"450\"></p>

<p>　　图4：比特币系统设计的五个要点</p>

<p>　　1) 去中心化的点对点电子现金系统</p>

<p>　　比特币要做的是一个“点对点的电子现金系统”，发送方和接收方直接交易，它们之间不需要中介机构的介入。</p>

<p>　　要去掉可信第三方等中介机构，就需要解决“双花问题”。在摘要中，中本聪给出了点对点网络的解决方案，并介绍了这个方案的核心——区块链。他并没有提到区块链(blockchain)这个词，但在论文中分别提到了区块(block)和链(chain)这两个概念。</p>

<p>　　2) 分布式账本</p>

<p>　　比特币的区块链是基于工作量证明形成的带时间戳、存储数据的数据块和由哈希指针连接成的链条。</p>

<p>　　这个链条或者说账本以分布式的方式存储在比特币网络的各个节点上，因而也被称为分布式账本。</p>

<p>　　3) 工作量证明</p>

<p>　　比特币网络中的节点按照规则进行加密哈希计算，以竞争获得生成新区块的权利。节点在竞争获胜后就获得记账权，它生成区块成为最新区块后，就获得与新区块对应的挖矿奖励。</p>

<p>　　工作量证明也是区块链账本的安全机制。如果不重做“工作量证明”所需的大量计算则此链条不可修改，这一共识机制保证了区块链上的数据的可靠性。</p>

<p>　　4) 最长链原则</p>

<p>　　在任何时刻，最长的链条是所有人都接受的最终记录。</p>

<p>　　由于最长链是由网络中的主要算力完成的，因而只要它们不都与攻击者合作，那么它们生成的最长链就是可信的。这个原则被称为“最长链原则”。</p>

<p>　　5) 去中心网络</p>

<p>　　比特币的去中心网络的架构非常简洁，本身需要的基础设施很少。它可以在互联网网络上运行。计算机节点可以随时离开或加入这个去中心网络，在加入时它们只需遵守最长链原则即可。</p>

<p>　　以上就是，什么是去中心化？比特币是如何实现去中心化的？的全部内容啦，相信对于去中心化，你已经清楚明了，但学无止境嘛，跟随信息管理部技术小编一起再深入学习吧，关注下信息管理部技术频道，我们一起进步！</p>
						</div>
					',`creator`='信息管理部',`created_at`='2019-12-12 14:47:04',`updated_at`='2019-12-12 14:47:04',`click`='3' WHERE `id` = 3 [ RunTime:0.0007s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000017s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000045s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009509s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009529s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000678s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000693s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000769s ]
INFO: [ app_end ] --END-- [ RunTime:0.000783s ]

[ 2019-12-13T09:02:35+08:00 ] ::1 /Home/Index/ShowDetail?id=3
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000637s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000730s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000751s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` WHERE `id` = 3 LIMIT 1   [ RunTime:0.0005s ]

[ 2019-12-13T09:02:46+08:00 ] ::1 /Home/Index/detail?id=3
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000498s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000559s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000580s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` WHERE `id` = 3 LIMIT 1   [ RunTime:0.0004s ]
SQL: UPDATE `articles` SET `origin_url`='https://js.aizhan.com/qukuailian/10141.html',`title`='什么是去中心化？比特币是如何实现去中心化的？',`text`='<div class=\"container\">
							
<p>　　这篇文章，信息管理部技术小编会通过对比三种数字货币的形式引出“什么是<span style=\"color:#002FD9\">去中心化</span>”，并展示了<span style=\"color:#002FD9\">比特币</span>在去中心化方面的表现如何，最后，向大家阐述了比特币去中心化的原理。</p>

<p>　　中本聪解决了自己定义的难题“点对点的电子现金”，在这个过程中，他“发明”了<span style=\"color:#002FD9\">区块链</span>技术。比特币系统融合密码学、博弈论和软件工程等三个领域的技术与理论，区块链技术是已有技术巧妙地组合形成的创新。中本聪不是凭空解决“点对点电子现金”这个难题的，他沿着前人的足迹前进，只是他完成了最后一跃。</p>

<p>　　接下来，我们来具体地看中本聪是如何解决他定义的难题，创造一个在数字世界中做价值表示的事物的。在讨论中我们会特别关注，他是如何实现“去中心化”的?</p>

<p>　　什么是去中心化?</p>

<p>　　在说“货币”时，我们讨论的是数字世界中的价值表示。在互联网上的数字世界中，人们曾设计出各种各样的电子现金或数字现金方案，在为《区块链：技术驱动金融》一书撰写前言时，杰里米·克拉克收集了约 100 种支付系统。他写道：“在通往比特币的道路上，布满了无数失败的尝试。”在所列的各种系统中，他认为大众所知道的只有 PayPal。当然，在移动支付超前发展的中国，我们都很熟悉支付宝与微信支付。</p>

<p>　　一直以来，数字世界中的“货币”有三种形式(见下图)：</p>

<p>　　中心化的在线支付;</p>

<p>　　中心化的计算机点数或互联网积分;</p>

<p>　　去中心化的电子现金。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"数字世界中“货币”的三种路径\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900276610.gif\" width=\"550\"></p>

<p style=\"text-align: center;\">　　图1：数字世界中“货币”的三种形式</p>

<p>　　第一种形式：中心化的在线支付</p>

<p>　　我们常用的 PayPal、支付宝、微信支付都是中心化的在线支付，在这些支付系统中流转的是映射到数字世界的各国的法定货币(也称法币)。</p>

<p>　　法币(fiat money)是“法定货币”或“法偿币”的简称，它依靠政府的法令成为合法流通的货币。法币是各国政府发行的纸币，发行者没有将货币兑现为实物(如黄金)的义务。</p>

<p>　　法定货币的价值来自拥有者相信货币将来能维持其购买力，本身并无内在价值。历史上，在政府强制规定纸钞为法定货币之前，大多数流通的货币具有一定的内在价值，例如金币、银两，它们又被称为商品货币(commodity money)。</p>

<p>　　在布雷顿森林体系中，35美元能兑换1盎司(1盎司=28.35克)黄金，因而当时的美元不是法币。之后，当美元与黄金脱钩后，美元就变成了法币。</p>

<p>　　第二种形式：中心化的计算机点数或互联网积分</p>

<p>　　中心化的互联网积分/计算机点数是指 Q 币、游戏币、航空里程等，它们还曾有一个更为大众所熟知的名字——虚拟货币。通常，它们不与物理世界的法币对应，而是由商业公司中心化发行，仅可以在一家公司的体系中使用。</p>

<p>　　第三种形式：去中心化的电子现金</p>

<p>　　去中心化的电子现金已经被计算机密码学家探索了多年，沿着前人的探索路径，中本聪最终将这条路径变成了现实。中本聪设计和开发了比特币系统，并催生了众多加密数字货币和区块链技术项目。</p>

<p>　　下面来分别看看这三种形式。三种形式与物理世界中的现金的对比如图 2 所示。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"一组对比：是否去中心化与是否自行发行\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900292385.gif\" width=\"500\"></p>

<p style=\"text-align: center;\">　　图2：一组对比：是否去中心化与是否自行发行</p>

<p>　　第一种形式：PayPal、支付宝、微信支付</p>

<p>　　现在，被互联网用户广泛使用的主流支付系统是 PayPal、支付宝，以及后来出现的移动支付 Square、微信支付等。这些第三方在线支付系统依赖于物理世界中的货币系统与金融体系，它们在数字世界中为用户提供支付、转账等服务。在使用它们时，我们所用的钱是物理世界中的法币，如美元、人民币、欧元、日元等，钱从银行账户中被映射到网络支付账户中。</p>

<p>　　过去，信用卡、储蓄卡等塑料卡片实现了纸币现金的数字化，把纸币现金变成了卡片账户中的数字现金。现在，在线支付系统将信用卡和储蓄卡的功能转移到互联网数字世界中来了。</p>

<p>　　在这些系统中流转的都是与法币一一对应的电子现金，变化的仅仅是“账户”，而非“货币”。这些系统所起的作用是，在账户和货币上连接物理世界与数字世界。</p>

<p>　　这些系统都是中心化的。它们背后所依赖的传统金融系统是中心化的，法币是由各国央行发行的。它们自身是完全中心化的，由单一机构运转网络支付系统。它们在交易中担任中心化的中介角色，进行账户的记账，是用户间数字现金流通的中心。当两个用户进行转账时，在线支付系统在中间担任可信第三方的中介角色。这就是为什么称之为“中心化的电子现金”。</p>

<p>　　第二种形式：Q币、游戏币等互联网积分或计算机点数</p>

<p>　　在互联网上，除了在线支付系统之外，还有一种过去常被称为“虚拟货币”的货币现象。</p>

<p>　　比如，用户可以用人民币购买腾讯公司的Q币，腾讯自称它是“统计代码”。Q币可以在腾讯的产品如QQ即时通信工具、网络游戏、音乐文学等中使用，兑换各种在线服务。</p>

<p>　　关于“什么是Q币，它有什么用处”的问题，腾讯网站上的解释是，Q币是用于计算机用户使用腾讯网站的各种增值服务的种类、数量或时间等的一种统计代码，并非任何代币、票券，不能用于除腾讯网站增值服务以外的任何商品或服务。</p>

<p>　　又比如，在游戏中，用户可以付钱购买道具，也可以通过战斗赢取游戏币。这些道具和游戏币的形态与价值各不相同，在一个游戏中都很难确定价格、进行兑换，在多个游戏之间几乎不可互换。当然，游戏玩家还是可以找到办法进行交换，在一定条件下甚至还可以将它们变现换回法币，例如，曾流行的“游戏打金”就是指有些玩家专门在游戏中获得金币，然后卖出获得现金收入。</p>

<p>　　正如腾讯用“统计代码”的说法所表明的，Q币等是中心化机构(通常是一家公司)发行与管理的互联网积分或计算机点数。它们是中心化的，其发行和交易都是中心化的。</p>

<p>　　一般来说，在不需要用户付费购买时，它们常被称为“积分”，在需要用户付费购买时，它们常被称为“点数”。</p>

<p>　　但近年来出现了很有意思的混合产物。在打车软件中，用户可以存入现金，如存 100 元得 150 元;也可以介绍其他人成为打车软件的用户从而获得奖励，如介绍一个新用户双方各获得 50 元余额。在这种情况下，在打车软件钱包中的余额就变成了一定程度上的点数与积分的混合物。在打车软件钱包中的余额一般是不能提现的，也不能在用户之间直接转账，至多只能帮其他用户代付车费。</p>

<p>　　我们还可以进一步对比在线支付系统和计算机点数。</p>

<p>　　一个视角是，它们是否映射物理世界中的货币。在线支付系统是映射物理世界中的货币的，电子现金价值就是货币的价值。而对于游戏迷来说，游戏币、游戏道具通常是不映射物理世界中的货币的。对游戏迷而言，游戏道具既有价值也有价格;对其他人而言，游戏道具可能毫无价值。在线支付系统与法币无缝连接，而这些互联网积分/计算机点数系统只与现实世界中的货币系统有很少的连接点，并且由于法律、商业等方面的原因，一般没有畅通的渠道将它们兑换回法币。</p>

<p>　　另一个是视角是“电子现金”或“点数/积分”是如何发行的?与在线支付系统不同，点数/积分是由一家公司自行发行的，用户付费获得点数，可被认为是向这家公司购买一种数字商品，用户稍后可用这些点数兑换成该公司体系内的虚拟商品或服务。</p>

<p>　　直到最近，与现实世界相连的在线支付系统和不与现实世界相连的互联网积分/计算机点数都是互联网中的主流。变化始于比特币的出现。</p>

<p>　　第三种形式：去中心化的电子现金</p>

<p>　　在这两个主流之外，一直还有着另外一种探索：能不能创造一种完全去中心化的点对点电子现金?其中最终极的设想是，在数字世界中，货币的发行和交易都不需要中心化机构介入，是由计算机自动执行的：在发行时，无须类似各国央行的中心化机构;两个人在相互转移电子现金时，也无须中心化机构的参与。</p>

<p>　　按前面的对比表格，这种理想化的去中心化的电子现金几乎在每个方面都试图进行突破：不映射线下的货币，而在数字世界中自行发行;发行去中心化，不需要一个类似中央银行的角色;像物理世界中的现金交易一样，交易无须中介介入。</p>

<p>　　这个问题很难，因为它的要求与数字世界中的技术基础设施的能力相悖。其中重要的一点是，在物理世界中，表示价值的现金纸币是不能复制的。但在数字世界中，数字化文档是可以复制的，每一个复制出来的文档都一模一样。因而过去在数字世界中，要用数字文件表示价值(比如表示一笔电子现金)，我们需要一个中心化机构来确保数字文件是唯一的。假设这笔电子现金现在属于我，当我把它转给你时，我们需要一个中介来协助记录所有权的变更，我不能直接把数字文件复制给你。</p>

<p>　　计算机密码学家们探索的是，在无须中心化介入的情况下，如何通过密码学的方法，用可复制的数字文件来代表价值。</p>

<p>　　这是一个漫长的探索过程，其开端甚至比互联网商业化都还早，最早可追溯到 20 世纪 80 年代。总的来说，由于这种探索是基于加密技术的，因此各种去中心化数字现金也被称为加密数字货币(crypto-currency)，其中 crypto 是密码学(cryptography)的词根。</p>

<p>　　最终在 2008 年，匿名的中本聪在密码朋克的邮件列表中发布了比特币的设计。他发明的比特币系统几乎集合了第三类探索的所有智慧结晶，他又加入了新的创新，最终在电子现金的发行和交易上都实现了去中心化。</p>

<p>　　正如我们所知，中本聪不只是设计和实现了这个最理想化的去中心化电子现金，他还“发明”了区块链技术。区块链的价值表示和价值转移功能让它可能成为新一代互联网的技术基础。</p>

<p>　　比特币实现了极致的“去中心化”</p>

<p>　　对照前文图表，与现有中心化的电子现金系统(在线支付系统)相比，比特币是与之完全相反的：</p>

<p>　　在线支付系统的货币发行是中心化的，比特币的发行是去中心化的;</p>

<p>　　在线支付系统的货币流动是中心化的，比特币的交易是去中心化的;</p>

<p>　　在线支付系统映射物理世界中的货币，比特币不映射任何现有的货币;</p>

<p>　　在线支付系统自己不进行货币的发行，比特币是在数字世界中凭空发行出来的。</p>

<p>　　在去中心化的程度上，比特币系统达到了极致。去中心化的初级阶段是自动化(automatic)，即根据人设定的规则自动运行，而去中心化的高级阶段是自治(autonomous)，也就是完全自治、自发。而比特币系统作为一个电子现金系统，达到了极致的去中心化状态(见图 3)：</p>

<p>　　作为一个货币应用，它不只交易是自治的，它的发行也是自治的。</p>

<p>　　作为一个计算机网络，它是完全去中心化的，而不仅仅是分布式网络。</p>

<p>　　作为一个组织，它是完全的社群自治，不需要有一个领导者居中协调。</p>

<p>　　去中心化处于区块链的思维模式的最内核，而比特币实现了极致的去中心化。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"比特币去中心化的层次\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900259362.gif\" width=\"420\"></p>

<p style=\"text-align: center;\">　　图3：比特币去中心化的层次</p>

<p>　　不过，之后在发展区块链技术和将之应用的过程中，我们又不得不从最极致的理想状态往实用方向调整，比如：</p>

<p>　　现在多数区块链项目都是由基金会管理的。以太坊是由创始人维塔利克·布特林(人称“V神”)和以太坊基金会居中协调的，而不像比特币社区那样是完全自治的。</p>

<p>　　常在金融系统中使用的联盟链，以及部分节点数量不多的基础公链，如小蚁(NEO)、EOS，更应被视为分布式网络，没有实现完全的去中心网络。</p>

<p>　　通过以太坊发行基于ERC20标准的通证，通证的发行规则是由项目方确定的，在运行过程中会酌情更改规则。它们的发行不是自动的或自治的。</p>

<p>　　常被视为区块链 3.0代表的 EOS 在智能合约部分引入了李嘉图合约和社区仲裁机制，也即交易部分不再是完全交给机器自动执行，在需要时人可以参与和干涉。</p>

<p>　　我们反复讨论比特币系统的设计，是因为它早已经把最极致的情况展现在所有人面前。而在将区块链技术落地应用的过程中，从最极致的去中心化往实用主义方向调整并不是倒退，而是事物发展的必然过程。</p>

<p>　　比特币是如何实现去中心化的?</p>

<p>　　那么，比特币系统具体是如何实现极致的去中心化的呢?</p>

<p>　　在比特币白皮书《比特币：一个点对点电子现金系统》中，中本聪详细地解释了他是如何设计这个系统的。在其中，他确立了此后所有区块链系统的主要设计原则。</p>

<p>　　一个真正的点对点电子现金应该允许从发起方直接在线支付给对方，而不需要通过第三方的金融机构。</p>

<p>　　现有的数字签名技术虽然提供了部分解决方案，但如果还需要经过一个可信的第三方机构来防止(电子现金的)“双重支付”，那就丧失了(电子现金带来的)主要好处。</p>

<p>　　针对电子现金会出现的“双重支付”问题，我们用点对点的网络技术提供了一个解决方案。</p>

<p>　　该网络给交易记录打上时间戳(timestamp)，对交易记录进行哈希散列处理后，将之并入一个不断增长的链条中，这个链条由哈希散列过的工作量证明(hash-based proof-of-work)组成，如果不重做工作量证明，以此形成的记录无法被改变。</p>

<p>　　最长的链条不仅仅是作为被观察到的事件序列的证明，并且证明它是由最大的CPU处理能力池产生的。只要掌控多数CPU处理能力的计算机节点不(与攻击者)联合起来攻击网络本身，它们将生成最长的链条，把攻击者甩在后面。</p>

<p>　　这个网络本身仅需要最简单的结构。信息尽最大努力在全网广播即可。节点可以随时离开和重新加入网络，只需(在重新加入时)将最长的工作量证明链条作为在该节点离线期间发生的交易的证明即可。</p>

<p>　　威廉·穆贾雅在《商业区块链》一书中对比特币白皮书摘要进行了分析，他总结了四个要点：</p>

<p>　　点对点电子交易;</p>

<p>　　不需要金融机构;</p>

<p>　　加密证据而不是中心化的信用;</p>

<p>　　信用存在于网络，而不是某个中心机构。</p>

<p>　　而从这个摘要中，我们提炼出了比特币系统设计的五个要点(见图 4)：比特币的区块链系统是由分布式账本(即狭义的区块链)和去中心网络(点对点网络)组成的，形成链条的方式是工作量证明共识机制。最长链是由网络中的算力共同决定的，因而它是可信的，节点离开和加入依据的是最长链是可信的这一原则。这些组合起来形成了比特币系统。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"比特币系统设计的五个要点\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900386883.gif\" width=\"450\"></p>

<p>　　图4：比特币系统设计的五个要点</p>

<p>　　1) 去中心化的点对点电子现金系统</p>

<p>　　比特币要做的是一个“点对点的电子现金系统”，发送方和接收方直接交易，它们之间不需要中介机构的介入。</p>

<p>　　要去掉可信第三方等中介机构，就需要解决“双花问题”。在摘要中，中本聪给出了点对点网络的解决方案，并介绍了这个方案的核心——区块链。他并没有提到区块链(blockchain)这个词，但在论文中分别提到了区块(block)和链(chain)这两个概念。</p>

<p>　　2) 分布式账本</p>

<p>　　比特币的区块链是基于工作量证明形成的带时间戳、存储数据的数据块和由哈希指针连接成的链条。</p>

<p>　　这个链条或者说账本以分布式的方式存储在比特币网络的各个节点上，因而也被称为分布式账本。</p>

<p>　　3) 工作量证明</p>

<p>　　比特币网络中的节点按照规则进行加密哈希计算，以竞争获得生成新区块的权利。节点在竞争获胜后就获得记账权，它生成区块成为最新区块后，就获得与新区块对应的挖矿奖励。</p>

<p>　　工作量证明也是区块链账本的安全机制。如果不重做“工作量证明”所需的大量计算则此链条不可修改，这一共识机制保证了区块链上的数据的可靠性。</p>

<p>　　4) 最长链原则</p>

<p>　　在任何时刻，最长的链条是所有人都接受的最终记录。</p>

<p>　　由于最长链是由网络中的主要算力完成的，因而只要它们不都与攻击者合作，那么它们生成的最长链就是可信的。这个原则被称为“最长链原则”。</p>

<p>　　5) 去中心网络</p>

<p>　　比特币的去中心网络的架构非常简洁，本身需要的基础设施很少。它可以在互联网网络上运行。计算机节点可以随时离开或加入这个去中心网络，在加入时它们只需遵守最长链原则即可。</p>

<p>　　以上就是，什么是去中心化？比特币是如何实现去中心化的？的全部内容啦，相信对于去中心化，你已经清楚明了，但学无止境嘛，跟随信息管理部技术小编一起再深入学习吧，关注下信息管理部技术频道，我们一起进步！</p>
						</div>
					',`creator`='信息管理部',`created_at`='2019-12-12 14:47:04',`updated_at`='2019-12-12 14:47:04',`click`='4' WHERE `id` = 3 [ RunTime:0.0008s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000022s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000044s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009742s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009768s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000491s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000510s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000649s ]
INFO: [ app_end ] --END-- [ RunTime:0.000666s ]

[ 2019-12-13T09:02:46+08:00 ] ::1 /Home/Index/ShowDetail?id=3
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000808s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000800s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000826s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` WHERE `id` = 3 LIMIT 1   [ RunTime:0.0005s ]

[ 2019-12-13T09:03:42+08:00 ] ::1 /Home/Index/detail?id=3
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000438s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000480s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000494s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0012s ]
SQL: SELECT * FROM `articles` WHERE `id` = 3 LIMIT 1   [ RunTime:0.0016s ]
SQL: UPDATE `articles` SET `origin_url`='https://js.aizhan.com/qukuailian/10141.html',`title`='什么是去中心化？比特币是如何实现去中心化的？',`text`='<div class=\"container\">
							
<p>　　这篇文章，信息管理部技术小编会通过对比三种数字货币的形式引出“什么是<span style=\"color:#002FD9\">去中心化</span>”，并展示了<span style=\"color:#002FD9\">比特币</span>在去中心化方面的表现如何，最后，向大家阐述了比特币去中心化的原理。</p>

<p>　　中本聪解决了自己定义的难题“点对点的电子现金”，在这个过程中，他“发明”了<span style=\"color:#002FD9\">区块链</span>技术。比特币系统融合密码学、博弈论和软件工程等三个领域的技术与理论，区块链技术是已有技术巧妙地组合形成的创新。中本聪不是凭空解决“点对点电子现金”这个难题的，他沿着前人的足迹前进，只是他完成了最后一跃。</p>

<p>　　接下来，我们来具体地看中本聪是如何解决他定义的难题，创造一个在数字世界中做价值表示的事物的。在讨论中我们会特别关注，他是如何实现“去中心化”的?</p>

<p>　　什么是去中心化?</p>

<p>　　在说“货币”时，我们讨论的是数字世界中的价值表示。在互联网上的数字世界中，人们曾设计出各种各样的电子现金或数字现金方案，在为《区块链：技术驱动金融》一书撰写前言时，杰里米·克拉克收集了约 100 种支付系统。他写道：“在通往比特币的道路上，布满了无数失败的尝试。”在所列的各种系统中，他认为大众所知道的只有 PayPal。当然，在移动支付超前发展的中国，我们都很熟悉支付宝与微信支付。</p>

<p>　　一直以来，数字世界中的“货币”有三种形式(见下图)：</p>

<p>　　中心化的在线支付;</p>

<p>　　中心化的计算机点数或互联网积分;</p>

<p>　　去中心化的电子现金。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"数字世界中“货币”的三种路径\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900276610.gif\" width=\"550\"></p>

<p style=\"text-align: center;\">　　图1：数字世界中“货币”的三种形式</p>

<p>　　第一种形式：中心化的在线支付</p>

<p>　　我们常用的 PayPal、支付宝、微信支付都是中心化的在线支付，在这些支付系统中流转的是映射到数字世界的各国的法定货币(也称法币)。</p>

<p>　　法币(fiat money)是“法定货币”或“法偿币”的简称，它依靠政府的法令成为合法流通的货币。法币是各国政府发行的纸币，发行者没有将货币兑现为实物(如黄金)的义务。</p>

<p>　　法定货币的价值来自拥有者相信货币将来能维持其购买力，本身并无内在价值。历史上，在政府强制规定纸钞为法定货币之前，大多数流通的货币具有一定的内在价值，例如金币、银两，它们又被称为商品货币(commodity money)。</p>

<p>　　在布雷顿森林体系中，35美元能兑换1盎司(1盎司=28.35克)黄金，因而当时的美元不是法币。之后，当美元与黄金脱钩后，美元就变成了法币。</p>

<p>　　第二种形式：中心化的计算机点数或互联网积分</p>

<p>　　中心化的互联网积分/计算机点数是指 Q 币、游戏币、航空里程等，它们还曾有一个更为大众所熟知的名字——虚拟货币。通常，它们不与物理世界的法币对应，而是由商业公司中心化发行，仅可以在一家公司的体系中使用。</p>

<p>　　第三种形式：去中心化的电子现金</p>

<p>　　去中心化的电子现金已经被计算机密码学家探索了多年，沿着前人的探索路径，中本聪最终将这条路径变成了现实。中本聪设计和开发了比特币系统，并催生了众多加密数字货币和区块链技术项目。</p>

<p>　　下面来分别看看这三种形式。三种形式与物理世界中的现金的对比如图 2 所示。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"一组对比：是否去中心化与是否自行发行\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900292385.gif\" width=\"500\"></p>

<p style=\"text-align: center;\">　　图2：一组对比：是否去中心化与是否自行发行</p>

<p>　　第一种形式：PayPal、支付宝、微信支付</p>

<p>　　现在，被互联网用户广泛使用的主流支付系统是 PayPal、支付宝，以及后来出现的移动支付 Square、微信支付等。这些第三方在线支付系统依赖于物理世界中的货币系统与金融体系，它们在数字世界中为用户提供支付、转账等服务。在使用它们时，我们所用的钱是物理世界中的法币，如美元、人民币、欧元、日元等，钱从银行账户中被映射到网络支付账户中。</p>

<p>　　过去，信用卡、储蓄卡等塑料卡片实现了纸币现金的数字化，把纸币现金变成了卡片账户中的数字现金。现在，在线支付系统将信用卡和储蓄卡的功能转移到互联网数字世界中来了。</p>

<p>　　在这些系统中流转的都是与法币一一对应的电子现金，变化的仅仅是“账户”，而非“货币”。这些系统所起的作用是，在账户和货币上连接物理世界与数字世界。</p>

<p>　　这些系统都是中心化的。它们背后所依赖的传统金融系统是中心化的，法币是由各国央行发行的。它们自身是完全中心化的，由单一机构运转网络支付系统。它们在交易中担任中心化的中介角色，进行账户的记账，是用户间数字现金流通的中心。当两个用户进行转账时，在线支付系统在中间担任可信第三方的中介角色。这就是为什么称之为“中心化的电子现金”。</p>

<p>　　第二种形式：Q币、游戏币等互联网积分或计算机点数</p>

<p>　　在互联网上，除了在线支付系统之外，还有一种过去常被称为“虚拟货币”的货币现象。</p>

<p>　　比如，用户可以用人民币购买腾讯公司的Q币，腾讯自称它是“统计代码”。Q币可以在腾讯的产品如QQ即时通信工具、网络游戏、音乐文学等中使用，兑换各种在线服务。</p>

<p>　　关于“什么是Q币，它有什么用处”的问题，腾讯网站上的解释是，Q币是用于计算机用户使用腾讯网站的各种增值服务的种类、数量或时间等的一种统计代码，并非任何代币、票券，不能用于除腾讯网站增值服务以外的任何商品或服务。</p>

<p>　　又比如，在游戏中，用户可以付钱购买道具，也可以通过战斗赢取游戏币。这些道具和游戏币的形态与价值各不相同，在一个游戏中都很难确定价格、进行兑换，在多个游戏之间几乎不可互换。当然，游戏玩家还是可以找到办法进行交换，在一定条件下甚至还可以将它们变现换回法币，例如，曾流行的“游戏打金”就是指有些玩家专门在游戏中获得金币，然后卖出获得现金收入。</p>

<p>　　正如腾讯用“统计代码”的说法所表明的，Q币等是中心化机构(通常是一家公司)发行与管理的互联网积分或计算机点数。它们是中心化的，其发行和交易都是中心化的。</p>

<p>　　一般来说，在不需要用户付费购买时，它们常被称为“积分”，在需要用户付费购买时，它们常被称为“点数”。</p>

<p>　　但近年来出现了很有意思的混合产物。在打车软件中，用户可以存入现金，如存 100 元得 150 元;也可以介绍其他人成为打车软件的用户从而获得奖励，如介绍一个新用户双方各获得 50 元余额。在这种情况下，在打车软件钱包中的余额就变成了一定程度上的点数与积分的混合物。在打车软件钱包中的余额一般是不能提现的，也不能在用户之间直接转账，至多只能帮其他用户代付车费。</p>

<p>　　我们还可以进一步对比在线支付系统和计算机点数。</p>

<p>　　一个视角是，它们是否映射物理世界中的货币。在线支付系统是映射物理世界中的货币的，电子现金价值就是货币的价值。而对于游戏迷来说，游戏币、游戏道具通常是不映射物理世界中的货币的。对游戏迷而言，游戏道具既有价值也有价格;对其他人而言，游戏道具可能毫无价值。在线支付系统与法币无缝连接，而这些互联网积分/计算机点数系统只与现实世界中的货币系统有很少的连接点，并且由于法律、商业等方面的原因，一般没有畅通的渠道将它们兑换回法币。</p>

<p>　　另一个是视角是“电子现金”或“点数/积分”是如何发行的?与在线支付系统不同，点数/积分是由一家公司自行发行的，用户付费获得点数，可被认为是向这家公司购买一种数字商品，用户稍后可用这些点数兑换成该公司体系内的虚拟商品或服务。</p>

<p>　　直到最近，与现实世界相连的在线支付系统和不与现实世界相连的互联网积分/计算机点数都是互联网中的主流。变化始于比特币的出现。</p>

<p>　　第三种形式：去中心化的电子现金</p>

<p>　　在这两个主流之外，一直还有着另外一种探索：能不能创造一种完全去中心化的点对点电子现金?其中最终极的设想是，在数字世界中，货币的发行和交易都不需要中心化机构介入，是由计算机自动执行的：在发行时，无须类似各国央行的中心化机构;两个人在相互转移电子现金时，也无须中心化机构的参与。</p>

<p>　　按前面的对比表格，这种理想化的去中心化的电子现金几乎在每个方面都试图进行突破：不映射线下的货币，而在数字世界中自行发行;发行去中心化，不需要一个类似中央银行的角色;像物理世界中的现金交易一样，交易无须中介介入。</p>

<p>　　这个问题很难，因为它的要求与数字世界中的技术基础设施的能力相悖。其中重要的一点是，在物理世界中，表示价值的现金纸币是不能复制的。但在数字世界中，数字化文档是可以复制的，每一个复制出来的文档都一模一样。因而过去在数字世界中，要用数字文件表示价值(比如表示一笔电子现金)，我们需要一个中心化机构来确保数字文件是唯一的。假设这笔电子现金现在属于我，当我把它转给你时，我们需要一个中介来协助记录所有权的变更，我不能直接把数字文件复制给你。</p>

<p>　　计算机密码学家们探索的是，在无须中心化介入的情况下，如何通过密码学的方法，用可复制的数字文件来代表价值。</p>

<p>　　这是一个漫长的探索过程，其开端甚至比互联网商业化都还早，最早可追溯到 20 世纪 80 年代。总的来说，由于这种探索是基于加密技术的，因此各种去中心化数字现金也被称为加密数字货币(crypto-currency)，其中 crypto 是密码学(cryptography)的词根。</p>

<p>　　最终在 2008 年，匿名的中本聪在密码朋克的邮件列表中发布了比特币的设计。他发明的比特币系统几乎集合了第三类探索的所有智慧结晶，他又加入了新的创新，最终在电子现金的发行和交易上都实现了去中心化。</p>

<p>　　正如我们所知，中本聪不只是设计和实现了这个最理想化的去中心化电子现金，他还“发明”了区块链技术。区块链的价值表示和价值转移功能让它可能成为新一代互联网的技术基础。</p>

<p>　　比特币实现了极致的“去中心化”</p>

<p>　　对照前文图表，与现有中心化的电子现金系统(在线支付系统)相比，比特币是与之完全相反的：</p>

<p>　　在线支付系统的货币发行是中心化的，比特币的发行是去中心化的;</p>

<p>　　在线支付系统的货币流动是中心化的，比特币的交易是去中心化的;</p>

<p>　　在线支付系统映射物理世界中的货币，比特币不映射任何现有的货币;</p>

<p>　　在线支付系统自己不进行货币的发行，比特币是在数字世界中凭空发行出来的。</p>

<p>　　在去中心化的程度上，比特币系统达到了极致。去中心化的初级阶段是自动化(automatic)，即根据人设定的规则自动运行，而去中心化的高级阶段是自治(autonomous)，也就是完全自治、自发。而比特币系统作为一个电子现金系统，达到了极致的去中心化状态(见图 3)：</p>

<p>　　作为一个货币应用，它不只交易是自治的，它的发行也是自治的。</p>

<p>　　作为一个计算机网络，它是完全去中心化的，而不仅仅是分布式网络。</p>

<p>　　作为一个组织，它是完全的社群自治，不需要有一个领导者居中协调。</p>

<p>　　去中心化处于区块链的思维模式的最内核，而比特币实现了极致的去中心化。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"比特币去中心化的层次\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900259362.gif\" width=\"420\"></p>

<p style=\"text-align: center;\">　　图3：比特币去中心化的层次</p>

<p>　　不过，之后在发展区块链技术和将之应用的过程中，我们又不得不从最极致的理想状态往实用方向调整，比如：</p>

<p>　　现在多数区块链项目都是由基金会管理的。以太坊是由创始人维塔利克·布特林(人称“V神”)和以太坊基金会居中协调的，而不像比特币社区那样是完全自治的。</p>

<p>　　常在金融系统中使用的联盟链，以及部分节点数量不多的基础公链，如小蚁(NEO)、EOS，更应被视为分布式网络，没有实现完全的去中心网络。</p>

<p>　　通过以太坊发行基于ERC20标准的通证，通证的发行规则是由项目方确定的，在运行过程中会酌情更改规则。它们的发行不是自动的或自治的。</p>

<p>　　常被视为区块链 3.0代表的 EOS 在智能合约部分引入了李嘉图合约和社区仲裁机制，也即交易部分不再是完全交给机器自动执行，在需要时人可以参与和干涉。</p>

<p>　　我们反复讨论比特币系统的设计，是因为它早已经把最极致的情况展现在所有人面前。而在将区块链技术落地应用的过程中，从最极致的去中心化往实用主义方向调整并不是倒退，而是事物发展的必然过程。</p>

<p>　　比特币是如何实现去中心化的?</p>

<p>　　那么，比特币系统具体是如何实现极致的去中心化的呢?</p>

<p>　　在比特币白皮书《比特币：一个点对点电子现金系统》中，中本聪详细地解释了他是如何设计这个系统的。在其中，他确立了此后所有区块链系统的主要设计原则。</p>

<p>　　一个真正的点对点电子现金应该允许从发起方直接在线支付给对方，而不需要通过第三方的金融机构。</p>

<p>　　现有的数字签名技术虽然提供了部分解决方案，但如果还需要经过一个可信的第三方机构来防止(电子现金的)“双重支付”，那就丧失了(电子现金带来的)主要好处。</p>

<p>　　针对电子现金会出现的“双重支付”问题，我们用点对点的网络技术提供了一个解决方案。</p>

<p>　　该网络给交易记录打上时间戳(timestamp)，对交易记录进行哈希散列处理后，将之并入一个不断增长的链条中，这个链条由哈希散列过的工作量证明(hash-based proof-of-work)组成，如果不重做工作量证明，以此形成的记录无法被改变。</p>

<p>　　最长的链条不仅仅是作为被观察到的事件序列的证明，并且证明它是由最大的CPU处理能力池产生的。只要掌控多数CPU处理能力的计算机节点不(与攻击者)联合起来攻击网络本身，它们将生成最长的链条，把攻击者甩在后面。</p>

<p>　　这个网络本身仅需要最简单的结构。信息尽最大努力在全网广播即可。节点可以随时离开和重新加入网络，只需(在重新加入时)将最长的工作量证明链条作为在该节点离线期间发生的交易的证明即可。</p>

<p>　　威廉·穆贾雅在《商业区块链》一书中对比特币白皮书摘要进行了分析，他总结了四个要点：</p>

<p>　　点对点电子交易;</p>

<p>　　不需要金融机构;</p>

<p>　　加密证据而不是中心化的信用;</p>

<p>　　信用存在于网络，而不是某个中心机构。</p>

<p>　　而从这个摘要中，我们提炼出了比特币系统设计的五个要点(见图 4)：比特币的区块链系统是由分布式账本(即狭义的区块链)和去中心网络(点对点网络)组成的，形成链条的方式是工作量证明共识机制。最长链是由网络中的算力共同决定的，因而它是可信的，节点离开和加入依据的是最长链是可信的这一原则。这些组合起来形成了比特币系统。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"比特币系统设计的五个要点\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900386883.gif\" width=\"450\"></p>

<p>　　图4：比特币系统设计的五个要点</p>

<p>　　1) 去中心化的点对点电子现金系统</p>

<p>　　比特币要做的是一个“点对点的电子现金系统”，发送方和接收方直接交易，它们之间不需要中介机构的介入。</p>

<p>　　要去掉可信第三方等中介机构，就需要解决“双花问题”。在摘要中，中本聪给出了点对点网络的解决方案，并介绍了这个方案的核心——区块链。他并没有提到区块链(blockchain)这个词，但在论文中分别提到了区块(block)和链(chain)这两个概念。</p>

<p>　　2) 分布式账本</p>

<p>　　比特币的区块链是基于工作量证明形成的带时间戳、存储数据的数据块和由哈希指针连接成的链条。</p>

<p>　　这个链条或者说账本以分布式的方式存储在比特币网络的各个节点上，因而也被称为分布式账本。</p>

<p>　　3) 工作量证明</p>

<p>　　比特币网络中的节点按照规则进行加密哈希计算，以竞争获得生成新区块的权利。节点在竞争获胜后就获得记账权，它生成区块成为最新区块后，就获得与新区块对应的挖矿奖励。</p>

<p>　　工作量证明也是区块链账本的安全机制。如果不重做“工作量证明”所需的大量计算则此链条不可修改，这一共识机制保证了区块链上的数据的可靠性。</p>

<p>　　4) 最长链原则</p>

<p>　　在任何时刻，最长的链条是所有人都接受的最终记录。</p>

<p>　　由于最长链是由网络中的主要算力完成的，因而只要它们不都与攻击者合作，那么它们生成的最长链就是可信的。这个原则被称为“最长链原则”。</p>

<p>　　5) 去中心网络</p>

<p>　　比特币的去中心网络的架构非常简洁，本身需要的基础设施很少。它可以在互联网网络上运行。计算机节点可以随时离开或加入这个去中心网络，在加入时它们只需遵守最长链原则即可。</p>

<p>　　以上就是，什么是去中心化？比特币是如何实现去中心化的？的全部内容啦，相信对于去中心化，你已经清楚明了，但学无止境嘛，跟随信息管理部技术小编一起再深入学习吧，关注下信息管理部技术频道，我们一起进步！</p>
						</div>
					',`creator`='信息管理部',`created_at`='2019-12-12 14:47:04',`updated_at`='2019-12-12 14:47:04',`click`='5' WHERE `id` = 3 [ RunTime:0.0007s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000018s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000034s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007856s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007877s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000476s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000492s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000621s ]
INFO: [ app_end ] --END-- [ RunTime:0.000636s ]

[ 2019-12-13T09:03:42+08:00 ] ::1 /Home/Index/ShowDetail?id=3
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000008s ]
INFO: [ app_init ] --END-- [ RunTime:0.000614s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000700s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000720s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` WHERE `id` = 3 LIMIT 1   [ RunTime:0.0004s ]

[ 2019-12-13T09:04:11+08:00 ] ::1 /Home/Index/detail?id=3
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000482s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000524s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000540s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0011s ]
SQL: SELECT * FROM `articles` WHERE `id` = 3 LIMIT 1   [ RunTime:0.0005s ]
SQL: UPDATE `articles` SET `origin_url`='https://js.aizhan.com/qukuailian/10141.html',`title`='什么是去中心化？比特币是如何实现去中心化的？',`text`='<div class=\"container\">
							
<p>　　这篇文章，信息管理部技术小编会通过对比三种数字货币的形式引出“什么是<span style=\"color:#002FD9\">去中心化</span>”，并展示了<span style=\"color:#002FD9\">比特币</span>在去中心化方面的表现如何，最后，向大家阐述了比特币去中心化的原理。</p>

<p>　　中本聪解决了自己定义的难题“点对点的电子现金”，在这个过程中，他“发明”了<span style=\"color:#002FD9\">区块链</span>技术。比特币系统融合密码学、博弈论和软件工程等三个领域的技术与理论，区块链技术是已有技术巧妙地组合形成的创新。中本聪不是凭空解决“点对点电子现金”这个难题的，他沿着前人的足迹前进，只是他完成了最后一跃。</p>

<p>　　接下来，我们来具体地看中本聪是如何解决他定义的难题，创造一个在数字世界中做价值表示的事物的。在讨论中我们会特别关注，他是如何实现“去中心化”的?</p>

<p>　　什么是去中心化?</p>

<p>　　在说“货币”时，我们讨论的是数字世界中的价值表示。在互联网上的数字世界中，人们曾设计出各种各样的电子现金或数字现金方案，在为《区块链：技术驱动金融》一书撰写前言时，杰里米·克拉克收集了约 100 种支付系统。他写道：“在通往比特币的道路上，布满了无数失败的尝试。”在所列的各种系统中，他认为大众所知道的只有 PayPal。当然，在移动支付超前发展的中国，我们都很熟悉支付宝与微信支付。</p>

<p>　　一直以来，数字世界中的“货币”有三种形式(见下图)：</p>

<p>　　中心化的在线支付;</p>

<p>　　中心化的计算机点数或互联网积分;</p>

<p>　　去中心化的电子现金。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"数字世界中“货币”的三种路径\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900276610.gif\" width=\"550\"></p>

<p style=\"text-align: center;\">　　图1：数字世界中“货币”的三种形式</p>

<p>　　第一种形式：中心化的在线支付</p>

<p>　　我们常用的 PayPal、支付宝、微信支付都是中心化的在线支付，在这些支付系统中流转的是映射到数字世界的各国的法定货币(也称法币)。</p>

<p>　　法币(fiat money)是“法定货币”或“法偿币”的简称，它依靠政府的法令成为合法流通的货币。法币是各国政府发行的纸币，发行者没有将货币兑现为实物(如黄金)的义务。</p>

<p>　　法定货币的价值来自拥有者相信货币将来能维持其购买力，本身并无内在价值。历史上，在政府强制规定纸钞为法定货币之前，大多数流通的货币具有一定的内在价值，例如金币、银两，它们又被称为商品货币(commodity money)。</p>

<p>　　在布雷顿森林体系中，35美元能兑换1盎司(1盎司=28.35克)黄金，因而当时的美元不是法币。之后，当美元与黄金脱钩后，美元就变成了法币。</p>

<p>　　第二种形式：中心化的计算机点数或互联网积分</p>

<p>　　中心化的互联网积分/计算机点数是指 Q 币、游戏币、航空里程等，它们还曾有一个更为大众所熟知的名字——虚拟货币。通常，它们不与物理世界的法币对应，而是由商业公司中心化发行，仅可以在一家公司的体系中使用。</p>

<p>　　第三种形式：去中心化的电子现金</p>

<p>　　去中心化的电子现金已经被计算机密码学家探索了多年，沿着前人的探索路径，中本聪最终将这条路径变成了现实。中本聪设计和开发了比特币系统，并催生了众多加密数字货币和区块链技术项目。</p>

<p>　　下面来分别看看这三种形式。三种形式与物理世界中的现金的对比如图 2 所示。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"一组对比：是否去中心化与是否自行发行\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900292385.gif\" width=\"500\"></p>

<p style=\"text-align: center;\">　　图2：一组对比：是否去中心化与是否自行发行</p>

<p>　　第一种形式：PayPal、支付宝、微信支付</p>

<p>　　现在，被互联网用户广泛使用的主流支付系统是 PayPal、支付宝，以及后来出现的移动支付 Square、微信支付等。这些第三方在线支付系统依赖于物理世界中的货币系统与金融体系，它们在数字世界中为用户提供支付、转账等服务。在使用它们时，我们所用的钱是物理世界中的法币，如美元、人民币、欧元、日元等，钱从银行账户中被映射到网络支付账户中。</p>

<p>　　过去，信用卡、储蓄卡等塑料卡片实现了纸币现金的数字化，把纸币现金变成了卡片账户中的数字现金。现在，在线支付系统将信用卡和储蓄卡的功能转移到互联网数字世界中来了。</p>

<p>　　在这些系统中流转的都是与法币一一对应的电子现金，变化的仅仅是“账户”，而非“货币”。这些系统所起的作用是，在账户和货币上连接物理世界与数字世界。</p>

<p>　　这些系统都是中心化的。它们背后所依赖的传统金融系统是中心化的，法币是由各国央行发行的。它们自身是完全中心化的，由单一机构运转网络支付系统。它们在交易中担任中心化的中介角色，进行账户的记账，是用户间数字现金流通的中心。当两个用户进行转账时，在线支付系统在中间担任可信第三方的中介角色。这就是为什么称之为“中心化的电子现金”。</p>

<p>　　第二种形式：Q币、游戏币等互联网积分或计算机点数</p>

<p>　　在互联网上，除了在线支付系统之外，还有一种过去常被称为“虚拟货币”的货币现象。</p>

<p>　　比如，用户可以用人民币购买腾讯公司的Q币，腾讯自称它是“统计代码”。Q币可以在腾讯的产品如QQ即时通信工具、网络游戏、音乐文学等中使用，兑换各种在线服务。</p>

<p>　　关于“什么是Q币，它有什么用处”的问题，腾讯网站上的解释是，Q币是用于计算机用户使用腾讯网站的各种增值服务的种类、数量或时间等的一种统计代码，并非任何代币、票券，不能用于除腾讯网站增值服务以外的任何商品或服务。</p>

<p>　　又比如，在游戏中，用户可以付钱购买道具，也可以通过战斗赢取游戏币。这些道具和游戏币的形态与价值各不相同，在一个游戏中都很难确定价格、进行兑换，在多个游戏之间几乎不可互换。当然，游戏玩家还是可以找到办法进行交换，在一定条件下甚至还可以将它们变现换回法币，例如，曾流行的“游戏打金”就是指有些玩家专门在游戏中获得金币，然后卖出获得现金收入。</p>

<p>　　正如腾讯用“统计代码”的说法所表明的，Q币等是中心化机构(通常是一家公司)发行与管理的互联网积分或计算机点数。它们是中心化的，其发行和交易都是中心化的。</p>

<p>　　一般来说，在不需要用户付费购买时，它们常被称为“积分”，在需要用户付费购买时，它们常被称为“点数”。</p>

<p>　　但近年来出现了很有意思的混合产物。在打车软件中，用户可以存入现金，如存 100 元得 150 元;也可以介绍其他人成为打车软件的用户从而获得奖励，如介绍一个新用户双方各获得 50 元余额。在这种情况下，在打车软件钱包中的余额就变成了一定程度上的点数与积分的混合物。在打车软件钱包中的余额一般是不能提现的，也不能在用户之间直接转账，至多只能帮其他用户代付车费。</p>

<p>　　我们还可以进一步对比在线支付系统和计算机点数。</p>

<p>　　一个视角是，它们是否映射物理世界中的货币。在线支付系统是映射物理世界中的货币的，电子现金价值就是货币的价值。而对于游戏迷来说，游戏币、游戏道具通常是不映射物理世界中的货币的。对游戏迷而言，游戏道具既有价值也有价格;对其他人而言，游戏道具可能毫无价值。在线支付系统与法币无缝连接，而这些互联网积分/计算机点数系统只与现实世界中的货币系统有很少的连接点，并且由于法律、商业等方面的原因，一般没有畅通的渠道将它们兑换回法币。</p>

<p>　　另一个是视角是“电子现金”或“点数/积分”是如何发行的?与在线支付系统不同，点数/积分是由一家公司自行发行的，用户付费获得点数，可被认为是向这家公司购买一种数字商品，用户稍后可用这些点数兑换成该公司体系内的虚拟商品或服务。</p>

<p>　　直到最近，与现实世界相连的在线支付系统和不与现实世界相连的互联网积分/计算机点数都是互联网中的主流。变化始于比特币的出现。</p>

<p>　　第三种形式：去中心化的电子现金</p>

<p>　　在这两个主流之外，一直还有着另外一种探索：能不能创造一种完全去中心化的点对点电子现金?其中最终极的设想是，在数字世界中，货币的发行和交易都不需要中心化机构介入，是由计算机自动执行的：在发行时，无须类似各国央行的中心化机构;两个人在相互转移电子现金时，也无须中心化机构的参与。</p>

<p>　　按前面的对比表格，这种理想化的去中心化的电子现金几乎在每个方面都试图进行突破：不映射线下的货币，而在数字世界中自行发行;发行去中心化，不需要一个类似中央银行的角色;像物理世界中的现金交易一样，交易无须中介介入。</p>

<p>　　这个问题很难，因为它的要求与数字世界中的技术基础设施的能力相悖。其中重要的一点是，在物理世界中，表示价值的现金纸币是不能复制的。但在数字世界中，数字化文档是可以复制的，每一个复制出来的文档都一模一样。因而过去在数字世界中，要用数字文件表示价值(比如表示一笔电子现金)，我们需要一个中心化机构来确保数字文件是唯一的。假设这笔电子现金现在属于我，当我把它转给你时，我们需要一个中介来协助记录所有权的变更，我不能直接把数字文件复制给你。</p>

<p>　　计算机密码学家们探索的是，在无须中心化介入的情况下，如何通过密码学的方法，用可复制的数字文件来代表价值。</p>

<p>　　这是一个漫长的探索过程，其开端甚至比互联网商业化都还早，最早可追溯到 20 世纪 80 年代。总的来说，由于这种探索是基于加密技术的，因此各种去中心化数字现金也被称为加密数字货币(crypto-currency)，其中 crypto 是密码学(cryptography)的词根。</p>

<p>　　最终在 2008 年，匿名的中本聪在密码朋克的邮件列表中发布了比特币的设计。他发明的比特币系统几乎集合了第三类探索的所有智慧结晶，他又加入了新的创新，最终在电子现金的发行和交易上都实现了去中心化。</p>

<p>　　正如我们所知，中本聪不只是设计和实现了这个最理想化的去中心化电子现金，他还“发明”了区块链技术。区块链的价值表示和价值转移功能让它可能成为新一代互联网的技术基础。</p>

<p>　　比特币实现了极致的“去中心化”</p>

<p>　　对照前文图表，与现有中心化的电子现金系统(在线支付系统)相比，比特币是与之完全相反的：</p>

<p>　　在线支付系统的货币发行是中心化的，比特币的发行是去中心化的;</p>

<p>　　在线支付系统的货币流动是中心化的，比特币的交易是去中心化的;</p>

<p>　　在线支付系统映射物理世界中的货币，比特币不映射任何现有的货币;</p>

<p>　　在线支付系统自己不进行货币的发行，比特币是在数字世界中凭空发行出来的。</p>

<p>　　在去中心化的程度上，比特币系统达到了极致。去中心化的初级阶段是自动化(automatic)，即根据人设定的规则自动运行，而去中心化的高级阶段是自治(autonomous)，也就是完全自治、自发。而比特币系统作为一个电子现金系统，达到了极致的去中心化状态(见图 3)：</p>

<p>　　作为一个货币应用，它不只交易是自治的，它的发行也是自治的。</p>

<p>　　作为一个计算机网络，它是完全去中心化的，而不仅仅是分布式网络。</p>

<p>　　作为一个组织，它是完全的社群自治，不需要有一个领导者居中协调。</p>

<p>　　去中心化处于区块链的思维模式的最内核，而比特币实现了极致的去中心化。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"比特币去中心化的层次\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900259362.gif\" width=\"420\"></p>

<p style=\"text-align: center;\">　　图3：比特币去中心化的层次</p>

<p>　　不过，之后在发展区块链技术和将之应用的过程中，我们又不得不从最极致的理想状态往实用方向调整，比如：</p>

<p>　　现在多数区块链项目都是由基金会管理的。以太坊是由创始人维塔利克·布特林(人称“V神”)和以太坊基金会居中协调的，而不像比特币社区那样是完全自治的。</p>

<p>　　常在金融系统中使用的联盟链，以及部分节点数量不多的基础公链，如小蚁(NEO)、EOS，更应被视为分布式网络，没有实现完全的去中心网络。</p>

<p>　　通过以太坊发行基于ERC20标准的通证，通证的发行规则是由项目方确定的，在运行过程中会酌情更改规则。它们的发行不是自动的或自治的。</p>

<p>　　常被视为区块链 3.0代表的 EOS 在智能合约部分引入了李嘉图合约和社区仲裁机制，也即交易部分不再是完全交给机器自动执行，在需要时人可以参与和干涉。</p>

<p>　　我们反复讨论比特币系统的设计，是因为它早已经把最极致的情况展现在所有人面前。而在将区块链技术落地应用的过程中，从最极致的去中心化往实用主义方向调整并不是倒退，而是事物发展的必然过程。</p>

<p>　　比特币是如何实现去中心化的?</p>

<p>　　那么，比特币系统具体是如何实现极致的去中心化的呢?</p>

<p>　　在比特币白皮书《比特币：一个点对点电子现金系统》中，中本聪详细地解释了他是如何设计这个系统的。在其中，他确立了此后所有区块链系统的主要设计原则。</p>

<p>　　一个真正的点对点电子现金应该允许从发起方直接在线支付给对方，而不需要通过第三方的金融机构。</p>

<p>　　现有的数字签名技术虽然提供了部分解决方案，但如果还需要经过一个可信的第三方机构来防止(电子现金的)“双重支付”，那就丧失了(电子现金带来的)主要好处。</p>

<p>　　针对电子现金会出现的“双重支付”问题，我们用点对点的网络技术提供了一个解决方案。</p>

<p>　　该网络给交易记录打上时间戳(timestamp)，对交易记录进行哈希散列处理后，将之并入一个不断增长的链条中，这个链条由哈希散列过的工作量证明(hash-based proof-of-work)组成，如果不重做工作量证明，以此形成的记录无法被改变。</p>

<p>　　最长的链条不仅仅是作为被观察到的事件序列的证明，并且证明它是由最大的CPU处理能力池产生的。只要掌控多数CPU处理能力的计算机节点不(与攻击者)联合起来攻击网络本身，它们将生成最长的链条，把攻击者甩在后面。</p>

<p>　　这个网络本身仅需要最简单的结构。信息尽最大努力在全网广播即可。节点可以随时离开和重新加入网络，只需(在重新加入时)将最长的工作量证明链条作为在该节点离线期间发生的交易的证明即可。</p>

<p>　　威廉·穆贾雅在《商业区块链》一书中对比特币白皮书摘要进行了分析，他总结了四个要点：</p>

<p>　　点对点电子交易;</p>

<p>　　不需要金融机构;</p>

<p>　　加密证据而不是中心化的信用;</p>

<p>　　信用存在于网络，而不是某个中心机构。</p>

<p>　　而从这个摘要中，我们提炼出了比特币系统设计的五个要点(见图 4)：比特币的区块链系统是由分布式账本(即狭义的区块链)和去中心网络(点对点网络)组成的，形成链条的方式是工作量证明共识机制。最长链是由网络中的算力共同决定的，因而它是可信的，节点离开和加入依据的是最长链是可信的这一原则。这些组合起来形成了比特币系统。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"比特币系统设计的五个要点\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900386883.gif\" width=\"450\"></p>

<p>　　图4：比特币系统设计的五个要点</p>

<p>　　1) 去中心化的点对点电子现金系统</p>

<p>　　比特币要做的是一个“点对点的电子现金系统”，发送方和接收方直接交易，它们之间不需要中介机构的介入。</p>

<p>　　要去掉可信第三方等中介机构，就需要解决“双花问题”。在摘要中，中本聪给出了点对点网络的解决方案，并介绍了这个方案的核心——区块链。他并没有提到区块链(blockchain)这个词，但在论文中分别提到了区块(block)和链(chain)这两个概念。</p>

<p>　　2) 分布式账本</p>

<p>　　比特币的区块链是基于工作量证明形成的带时间戳、存储数据的数据块和由哈希指针连接成的链条。</p>

<p>　　这个链条或者说账本以分布式的方式存储在比特币网络的各个节点上，因而也被称为分布式账本。</p>

<p>　　3) 工作量证明</p>

<p>　　比特币网络中的节点按照规则进行加密哈希计算，以竞争获得生成新区块的权利。节点在竞争获胜后就获得记账权，它生成区块成为最新区块后，就获得与新区块对应的挖矿奖励。</p>

<p>　　工作量证明也是区块链账本的安全机制。如果不重做“工作量证明”所需的大量计算则此链条不可修改，这一共识机制保证了区块链上的数据的可靠性。</p>

<p>　　4) 最长链原则</p>

<p>　　在任何时刻，最长的链条是所有人都接受的最终记录。</p>

<p>　　由于最长链是由网络中的主要算力完成的，因而只要它们不都与攻击者合作，那么它们生成的最长链就是可信的。这个原则被称为“最长链原则”。</p>

<p>　　5) 去中心网络</p>

<p>　　比特币的去中心网络的架构非常简洁，本身需要的基础设施很少。它可以在互联网网络上运行。计算机节点可以随时离开或加入这个去中心网络，在加入时它们只需遵守最长链原则即可。</p>

<p>　　以上就是，什么是去中心化？比特币是如何实现去中心化的？的全部内容啦，相信对于去中心化，你已经清楚明了，但学无止境嘛，跟随信息管理部技术小编一起再深入学习吧，关注下信息管理部技术频道，我们一起进步！</p>
						</div>
					',`creator`='信息管理部',`created_at`='2019-12-12 14:47:04',`updated_at`='2019-12-12 14:47:04',`click`='6' WHERE `id` = 3 [ RunTime:0.0014s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000021s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000041s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008695s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008718s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000506s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000524s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000688s ]
INFO: [ app_end ] --END-- [ RunTime:0.000705s ]

[ 2019-12-13T09:04:11+08:00 ] ::1 /Home/Index/ShowDetail?id=3
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000609s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000799s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000824s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` WHERE `id` = 3 LIMIT 1   [ RunTime:0.0005s ]

[ 2019-12-13T09:04:16+08:00 ] ::1 /Home/Index/detail?id=3
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000496s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000539s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000554s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0007s ]
SQL: SELECT * FROM `articles` WHERE `id` = 3 LIMIT 1   [ RunTime:0.0004s ]
SQL: UPDATE `articles` SET `origin_url`='https://js.aizhan.com/qukuailian/10141.html',`title`='什么是去中心化？比特币是如何实现去中心化的？',`text`='<div class=\"container\">
							
<p>　　这篇文章，信息管理部技术小编会通过对比三种数字货币的形式引出“什么是<span style=\"color:#002FD9\">去中心化</span>”，并展示了<span style=\"color:#002FD9\">比特币</span>在去中心化方面的表现如何，最后，向大家阐述了比特币去中心化的原理。</p>

<p>　　中本聪解决了自己定义的难题“点对点的电子现金”，在这个过程中，他“发明”了<span style=\"color:#002FD9\">区块链</span>技术。比特币系统融合密码学、博弈论和软件工程等三个领域的技术与理论，区块链技术是已有技术巧妙地组合形成的创新。中本聪不是凭空解决“点对点电子现金”这个难题的，他沿着前人的足迹前进，只是他完成了最后一跃。</p>

<p>　　接下来，我们来具体地看中本聪是如何解决他定义的难题，创造一个在数字世界中做价值表示的事物的。在讨论中我们会特别关注，他是如何实现“去中心化”的?</p>

<p>　　什么是去中心化?</p>

<p>　　在说“货币”时，我们讨论的是数字世界中的价值表示。在互联网上的数字世界中，人们曾设计出各种各样的电子现金或数字现金方案，在为《区块链：技术驱动金融》一书撰写前言时，杰里米·克拉克收集了约 100 种支付系统。他写道：“在通往比特币的道路上，布满了无数失败的尝试。”在所列的各种系统中，他认为大众所知道的只有 PayPal。当然，在移动支付超前发展的中国，我们都很熟悉支付宝与微信支付。</p>

<p>　　一直以来，数字世界中的“货币”有三种形式(见下图)：</p>

<p>　　中心化的在线支付;</p>

<p>　　中心化的计算机点数或互联网积分;</p>

<p>　　去中心化的电子现金。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"数字世界中“货币”的三种路径\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900276610.gif\" width=\"550\"></p>

<p style=\"text-align: center;\">　　图1：数字世界中“货币”的三种形式</p>

<p>　　第一种形式：中心化的在线支付</p>

<p>　　我们常用的 PayPal、支付宝、微信支付都是中心化的在线支付，在这些支付系统中流转的是映射到数字世界的各国的法定货币(也称法币)。</p>

<p>　　法币(fiat money)是“法定货币”或“法偿币”的简称，它依靠政府的法令成为合法流通的货币。法币是各国政府发行的纸币，发行者没有将货币兑现为实物(如黄金)的义务。</p>

<p>　　法定货币的价值来自拥有者相信货币将来能维持其购买力，本身并无内在价值。历史上，在政府强制规定纸钞为法定货币之前，大多数流通的货币具有一定的内在价值，例如金币、银两，它们又被称为商品货币(commodity money)。</p>

<p>　　在布雷顿森林体系中，35美元能兑换1盎司(1盎司=28.35克)黄金，因而当时的美元不是法币。之后，当美元与黄金脱钩后，美元就变成了法币。</p>

<p>　　第二种形式：中心化的计算机点数或互联网积分</p>

<p>　　中心化的互联网积分/计算机点数是指 Q 币、游戏币、航空里程等，它们还曾有一个更为大众所熟知的名字——虚拟货币。通常，它们不与物理世界的法币对应，而是由商业公司中心化发行，仅可以在一家公司的体系中使用。</p>

<p>　　第三种形式：去中心化的电子现金</p>

<p>　　去中心化的电子现金已经被计算机密码学家探索了多年，沿着前人的探索路径，中本聪最终将这条路径变成了现实。中本聪设计和开发了比特币系统，并催生了众多加密数字货币和区块链技术项目。</p>

<p>　　下面来分别看看这三种形式。三种形式与物理世界中的现金的对比如图 2 所示。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"一组对比：是否去中心化与是否自行发行\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900292385.gif\" width=\"500\"></p>

<p style=\"text-align: center;\">　　图2：一组对比：是否去中心化与是否自行发行</p>

<p>　　第一种形式：PayPal、支付宝、微信支付</p>

<p>　　现在，被互联网用户广泛使用的主流支付系统是 PayPal、支付宝，以及后来出现的移动支付 Square、微信支付等。这些第三方在线支付系统依赖于物理世界中的货币系统与金融体系，它们在数字世界中为用户提供支付、转账等服务。在使用它们时，我们所用的钱是物理世界中的法币，如美元、人民币、欧元、日元等，钱从银行账户中被映射到网络支付账户中。</p>

<p>　　过去，信用卡、储蓄卡等塑料卡片实现了纸币现金的数字化，把纸币现金变成了卡片账户中的数字现金。现在，在线支付系统将信用卡和储蓄卡的功能转移到互联网数字世界中来了。</p>

<p>　　在这些系统中流转的都是与法币一一对应的电子现金，变化的仅仅是“账户”，而非“货币”。这些系统所起的作用是，在账户和货币上连接物理世界与数字世界。</p>

<p>　　这些系统都是中心化的。它们背后所依赖的传统金融系统是中心化的，法币是由各国央行发行的。它们自身是完全中心化的，由单一机构运转网络支付系统。它们在交易中担任中心化的中介角色，进行账户的记账，是用户间数字现金流通的中心。当两个用户进行转账时，在线支付系统在中间担任可信第三方的中介角色。这就是为什么称之为“中心化的电子现金”。</p>

<p>　　第二种形式：Q币、游戏币等互联网积分或计算机点数</p>

<p>　　在互联网上，除了在线支付系统之外，还有一种过去常被称为“虚拟货币”的货币现象。</p>

<p>　　比如，用户可以用人民币购买腾讯公司的Q币，腾讯自称它是“统计代码”。Q币可以在腾讯的产品如QQ即时通信工具、网络游戏、音乐文学等中使用，兑换各种在线服务。</p>

<p>　　关于“什么是Q币，它有什么用处”的问题，腾讯网站上的解释是，Q币是用于计算机用户使用腾讯网站的各种增值服务的种类、数量或时间等的一种统计代码，并非任何代币、票券，不能用于除腾讯网站增值服务以外的任何商品或服务。</p>

<p>　　又比如，在游戏中，用户可以付钱购买道具，也可以通过战斗赢取游戏币。这些道具和游戏币的形态与价值各不相同，在一个游戏中都很难确定价格、进行兑换，在多个游戏之间几乎不可互换。当然，游戏玩家还是可以找到办法进行交换，在一定条件下甚至还可以将它们变现换回法币，例如，曾流行的“游戏打金”就是指有些玩家专门在游戏中获得金币，然后卖出获得现金收入。</p>

<p>　　正如腾讯用“统计代码”的说法所表明的，Q币等是中心化机构(通常是一家公司)发行与管理的互联网积分或计算机点数。它们是中心化的，其发行和交易都是中心化的。</p>

<p>　　一般来说，在不需要用户付费购买时，它们常被称为“积分”，在需要用户付费购买时，它们常被称为“点数”。</p>

<p>　　但近年来出现了很有意思的混合产物。在打车软件中，用户可以存入现金，如存 100 元得 150 元;也可以介绍其他人成为打车软件的用户从而获得奖励，如介绍一个新用户双方各获得 50 元余额。在这种情况下，在打车软件钱包中的余额就变成了一定程度上的点数与积分的混合物。在打车软件钱包中的余额一般是不能提现的，也不能在用户之间直接转账，至多只能帮其他用户代付车费。</p>

<p>　　我们还可以进一步对比在线支付系统和计算机点数。</p>

<p>　　一个视角是，它们是否映射物理世界中的货币。在线支付系统是映射物理世界中的货币的，电子现金价值就是货币的价值。而对于游戏迷来说，游戏币、游戏道具通常是不映射物理世界中的货币的。对游戏迷而言，游戏道具既有价值也有价格;对其他人而言，游戏道具可能毫无价值。在线支付系统与法币无缝连接，而这些互联网积分/计算机点数系统只与现实世界中的货币系统有很少的连接点，并且由于法律、商业等方面的原因，一般没有畅通的渠道将它们兑换回法币。</p>

<p>　　另一个是视角是“电子现金”或“点数/积分”是如何发行的?与在线支付系统不同，点数/积分是由一家公司自行发行的，用户付费获得点数，可被认为是向这家公司购买一种数字商品，用户稍后可用这些点数兑换成该公司体系内的虚拟商品或服务。</p>

<p>　　直到最近，与现实世界相连的在线支付系统和不与现实世界相连的互联网积分/计算机点数都是互联网中的主流。变化始于比特币的出现。</p>

<p>　　第三种形式：去中心化的电子现金</p>

<p>　　在这两个主流之外，一直还有着另外一种探索：能不能创造一种完全去中心化的点对点电子现金?其中最终极的设想是，在数字世界中，货币的发行和交易都不需要中心化机构介入，是由计算机自动执行的：在发行时，无须类似各国央行的中心化机构;两个人在相互转移电子现金时，也无须中心化机构的参与。</p>

<p>　　按前面的对比表格，这种理想化的去中心化的电子现金几乎在每个方面都试图进行突破：不映射线下的货币，而在数字世界中自行发行;发行去中心化，不需要一个类似中央银行的角色;像物理世界中的现金交易一样，交易无须中介介入。</p>

<p>　　这个问题很难，因为它的要求与数字世界中的技术基础设施的能力相悖。其中重要的一点是，在物理世界中，表示价值的现金纸币是不能复制的。但在数字世界中，数字化文档是可以复制的，每一个复制出来的文档都一模一样。因而过去在数字世界中，要用数字文件表示价值(比如表示一笔电子现金)，我们需要一个中心化机构来确保数字文件是唯一的。假设这笔电子现金现在属于我，当我把它转给你时，我们需要一个中介来协助记录所有权的变更，我不能直接把数字文件复制给你。</p>

<p>　　计算机密码学家们探索的是，在无须中心化介入的情况下，如何通过密码学的方法，用可复制的数字文件来代表价值。</p>

<p>　　这是一个漫长的探索过程，其开端甚至比互联网商业化都还早，最早可追溯到 20 世纪 80 年代。总的来说，由于这种探索是基于加密技术的，因此各种去中心化数字现金也被称为加密数字货币(crypto-currency)，其中 crypto 是密码学(cryptography)的词根。</p>

<p>　　最终在 2008 年，匿名的中本聪在密码朋克的邮件列表中发布了比特币的设计。他发明的比特币系统几乎集合了第三类探索的所有智慧结晶，他又加入了新的创新，最终在电子现金的发行和交易上都实现了去中心化。</p>

<p>　　正如我们所知，中本聪不只是设计和实现了这个最理想化的去中心化电子现金，他还“发明”了区块链技术。区块链的价值表示和价值转移功能让它可能成为新一代互联网的技术基础。</p>

<p>　　比特币实现了极致的“去中心化”</p>

<p>　　对照前文图表，与现有中心化的电子现金系统(在线支付系统)相比，比特币是与之完全相反的：</p>

<p>　　在线支付系统的货币发行是中心化的，比特币的发行是去中心化的;</p>

<p>　　在线支付系统的货币流动是中心化的，比特币的交易是去中心化的;</p>

<p>　　在线支付系统映射物理世界中的货币，比特币不映射任何现有的货币;</p>

<p>　　在线支付系统自己不进行货币的发行，比特币是在数字世界中凭空发行出来的。</p>

<p>　　在去中心化的程度上，比特币系统达到了极致。去中心化的初级阶段是自动化(automatic)，即根据人设定的规则自动运行，而去中心化的高级阶段是自治(autonomous)，也就是完全自治、自发。而比特币系统作为一个电子现金系统，达到了极致的去中心化状态(见图 3)：</p>

<p>　　作为一个货币应用，它不只交易是自治的，它的发行也是自治的。</p>

<p>　　作为一个计算机网络，它是完全去中心化的，而不仅仅是分布式网络。</p>

<p>　　作为一个组织，它是完全的社群自治，不需要有一个领导者居中协调。</p>

<p>　　去中心化处于区块链的思维模式的最内核，而比特币实现了极致的去中心化。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"比特币去中心化的层次\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900259362.gif\" width=\"420\"></p>

<p style=\"text-align: center;\">　　图3：比特币去中心化的层次</p>

<p>　　不过，之后在发展区块链技术和将之应用的过程中，我们又不得不从最极致的理想状态往实用方向调整，比如：</p>

<p>　　现在多数区块链项目都是由基金会管理的。以太坊是由创始人维塔利克·布特林(人称“V神”)和以太坊基金会居中协调的，而不像比特币社区那样是完全自治的。</p>

<p>　　常在金融系统中使用的联盟链，以及部分节点数量不多的基础公链，如小蚁(NEO)、EOS，更应被视为分布式网络，没有实现完全的去中心网络。</p>

<p>　　通过以太坊发行基于ERC20标准的通证，通证的发行规则是由项目方确定的，在运行过程中会酌情更改规则。它们的发行不是自动的或自治的。</p>

<p>　　常被视为区块链 3.0代表的 EOS 在智能合约部分引入了李嘉图合约和社区仲裁机制，也即交易部分不再是完全交给机器自动执行，在需要时人可以参与和干涉。</p>

<p>　　我们反复讨论比特币系统的设计，是因为它早已经把最极致的情况展现在所有人面前。而在将区块链技术落地应用的过程中，从最极致的去中心化往实用主义方向调整并不是倒退，而是事物发展的必然过程。</p>

<p>　　比特币是如何实现去中心化的?</p>

<p>　　那么，比特币系统具体是如何实现极致的去中心化的呢?</p>

<p>　　在比特币白皮书《比特币：一个点对点电子现金系统》中，中本聪详细地解释了他是如何设计这个系统的。在其中，他确立了此后所有区块链系统的主要设计原则。</p>

<p>　　一个真正的点对点电子现金应该允许从发起方直接在线支付给对方，而不需要通过第三方的金融机构。</p>

<p>　　现有的数字签名技术虽然提供了部分解决方案，但如果还需要经过一个可信的第三方机构来防止(电子现金的)“双重支付”，那就丧失了(电子现金带来的)主要好处。</p>

<p>　　针对电子现金会出现的“双重支付”问题，我们用点对点的网络技术提供了一个解决方案。</p>

<p>　　该网络给交易记录打上时间戳(timestamp)，对交易记录进行哈希散列处理后，将之并入一个不断增长的链条中，这个链条由哈希散列过的工作量证明(hash-based proof-of-work)组成，如果不重做工作量证明，以此形成的记录无法被改变。</p>

<p>　　最长的链条不仅仅是作为被观察到的事件序列的证明，并且证明它是由最大的CPU处理能力池产生的。只要掌控多数CPU处理能力的计算机节点不(与攻击者)联合起来攻击网络本身，它们将生成最长的链条，把攻击者甩在后面。</p>

<p>　　这个网络本身仅需要最简单的结构。信息尽最大努力在全网广播即可。节点可以随时离开和重新加入网络，只需(在重新加入时)将最长的工作量证明链条作为在该节点离线期间发生的交易的证明即可。</p>

<p>　　威廉·穆贾雅在《商业区块链》一书中对比特币白皮书摘要进行了分析，他总结了四个要点：</p>

<p>　　点对点电子交易;</p>

<p>　　不需要金融机构;</p>

<p>　　加密证据而不是中心化的信用;</p>

<p>　　信用存在于网络，而不是某个中心机构。</p>

<p>　　而从这个摘要中，我们提炼出了比特币系统设计的五个要点(见图 4)：比特币的区块链系统是由分布式账本(即狭义的区块链)和去中心网络(点对点网络)组成的，形成链条的方式是工作量证明共识机制。最长链是由网络中的算力共同决定的，因而它是可信的，节点离开和加入依据的是最长链是可信的这一原则。这些组合起来形成了比特币系统。</p>

<p style=\"text-align:center\"><img align=\"\" alt=\"比特币系统设计的五个要点\" border=\"0\" src=\"https://js.aizhan.com/jishu/static/dlimg/201911/157354900386883.gif\" width=\"450\"></p>

<p>　　图4：比特币系统设计的五个要点</p>

<p>　　1) 去中心化的点对点电子现金系统</p>

<p>　　比特币要做的是一个“点对点的电子现金系统”，发送方和接收方直接交易，它们之间不需要中介机构的介入。</p>

<p>　　要去掉可信第三方等中介机构，就需要解决“双花问题”。在摘要中，中本聪给出了点对点网络的解决方案，并介绍了这个方案的核心——区块链。他并没有提到区块链(blockchain)这个词，但在论文中分别提到了区块(block)和链(chain)这两个概念。</p>

<p>　　2) 分布式账本</p>

<p>　　比特币的区块链是基于工作量证明形成的带时间戳、存储数据的数据块和由哈希指针连接成的链条。</p>

<p>　　这个链条或者说账本以分布式的方式存储在比特币网络的各个节点上，因而也被称为分布式账本。</p>

<p>　　3) 工作量证明</p>

<p>　　比特币网络中的节点按照规则进行加密哈希计算，以竞争获得生成新区块的权利。节点在竞争获胜后就获得记账权，它生成区块成为最新区块后，就获得与新区块对应的挖矿奖励。</p>

<p>　　工作量证明也是区块链账本的安全机制。如果不重做“工作量证明”所需的大量计算则此链条不可修改，这一共识机制保证了区块链上的数据的可靠性。</p>

<p>　　4) 最长链原则</p>

<p>　　在任何时刻，最长的链条是所有人都接受的最终记录。</p>

<p>　　由于最长链是由网络中的主要算力完成的，因而只要它们不都与攻击者合作，那么它们生成的最长链就是可信的。这个原则被称为“最长链原则”。</p>

<p>　　5) 去中心网络</p>

<p>　　比特币的去中心网络的架构非常简洁，本身需要的基础设施很少。它可以在互联网网络上运行。计算机节点可以随时离开或加入这个去中心网络，在加入时它们只需遵守最长链原则即可。</p>

<p>　　以上就是，什么是去中心化？比特币是如何实现去中心化的？的全部内容啦，相信对于去中心化，你已经清楚明了，但学无止境嘛，跟随信息管理部技术小编一起再深入学习吧，关注下信息管理部技术频道，我们一起进步！</p>
						</div>
					',`creator`='信息管理部',`created_at`='2019-12-12 14:47:04',`updated_at`='2019-12-12 14:47:04',`click`='7' WHERE `id` = 3 [ RunTime:0.0008s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000020s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000042s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009345s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009370s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000530s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000547s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000678s ]
INFO: [ app_end ] --END-- [ RunTime:0.000696s ]

[ 2019-12-13T09:04:16+08:00 ] ::1 /Home/Index/ShowDetail?id=3
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000919s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000653s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000672s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` WHERE `id` = 3 LIMIT 1   [ RunTime:0.0004s ]

[ 2019-12-13T09:05:10+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000632s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000728s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000744s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000017s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000036s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.010967s ]
INFO: [ view_parse ] --END-- [ RunTime:0.011010s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000542s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000556s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000684s ]
INFO: [ app_end ] --END-- [ RunTime:0.000698s ]

[ 2019-12-13T09:05:10+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000055s ]
INFO: [ app_init ] --END-- [ RunTime:0.001364s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000678s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000698s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0025s ]

[ 2019-12-13T09:05:13+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000460s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000501s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000515s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0024s ]

[ 2019-12-13T09:08:38+08:00 ] ::1 /Home/Index/detail?id=36
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000576s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000625s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000641s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` WHERE `id` = 36 LIMIT 1   [ RunTime:0.0003s ]
SQL: UPDATE `articles` SET `origin_url`='https://js.aizhan.com/data/oracle/10516.html',`title`='教你彻底删除Oracle数据库',`text`='<div class=\"container\">
							
<p>在使用<span style=\"color:#002FD9\"><span style=\"color:#002FD9\">Oracle数据库</span></span>之后当我们不在使用或者因为其他原因需要删除Oracle数据库的时候删除Oracle数据库，那么你知道怎么删除Oracle数据库吗？下面就让小编教你彻底删除Oracle数据库。</p>

<p>1.关闭oracle所有的服务。可以在windows的服务管理器中关闭；<br>
2.打开注册表：regedit 打开路径：<br>
HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ 删除该路径下的所有以oracle开始的服务名称，这个键是标识Oracle在windows下注册的各种服务！<br><br>
3.打开注册表，找到路径：<br>
HKEY_LOCAL_MACHINE\\SOFTWARE\\ORACLE 删除该oracle目录，该目录下注册着Oracle数据库的软件安装信息。<br><br>
4.删除注册的oracle事件日志，打开注册表 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Eventlog\\Application 删除注册表的以oracle开头的所有项目。<br><br>
5.删除环境变量path中关于oracle的内容。 鼠标右键右单击“我的电脑-->属性-->高级-->环境变量-->PATH 变量。 删除Oracle在该值中的内容。注意:path中记录着一堆操作系统的目录，在windows中各个目录之间使用分号（;）隔开的，删除时注意。 建议：删除PATH环境变量中关于Oracle的值时，将该值全部拷贝到文本编辑器中，找到对应的Oracle的值，删除后，再拷贝修改的串，粘贴到PATH环境变量中，这样相对而言比较安全。<br><br>
6.重新启动操作系统。<br>
以上1~5个步骤操作完毕后，重新启动操作系统。<br><br>
7.重启操作系统后各种Oracle相关的进程都不会加载了。这时删除Oracle_Home下的所有数据。（Oracle_Home指Oracle程序的安装目录）<br><br>
8.删除C:\\Program Files下oracle目录。 （该目录视Oracle安装所在路径而定）<br><br>
9.删除开始菜单下oracle项，如： C:\\Documents and Settings\\All Users\\「开始」菜单\\程序\\Oracle - Ora10g 不同的安装这个目录稍有不同。 如果不删除开始菜单下的Oracle相关菜单目录，没关系，这个不影响再次安装Oracle.当再次安装Oracle时，该菜单会被替换。</p>

<p>上文就是小编教你彻底删除Oracle数据库的方法，删除Oracle数据库并不难，但要彻底删除就不简单了，希望大家可以好好掌握。</p>
						</div>
					',`creator`='信息管理部',`created_at`='2019-12-13 08:52:37',`updated_at`='2019-12-13 08:52:37',`click`='1' WHERE `id` = 36 [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000016s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000032s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009300s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009323s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000613s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000626s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000711s ]
INFO: [ app_end ] --END-- [ RunTime:0.000725s ]

[ 2019-12-13T09:08:38+08:00 ] ::1 /Home/Index/ShowDetail?id=36
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000534s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001020s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001060s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` WHERE `id` = 36 LIMIT 1   [ RunTime:0.0003s ]

[ 2019-12-13T09:09:08+08:00 ] ::1 /Home/Index/detail?id=25
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000397s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000471s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000485s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0012s ]
SQL: SELECT * FROM `articles` WHERE `id` = 25 LIMIT 1   [ RunTime:0.0006s ]
SQL: UPDATE `articles` SET `origin_url`='https://js.aizhan.com/data/oracle/10598.html',`title`='设计大型Oracle数据库的方法',`text`='<div class=\"container\">
							
<p>　　<span style=\"color:#002FD9\"><span style=\"color:#002FD9\">Oracle</span></span><span style=\"color:#002FD9\"><span style=\"color:#002FD9\">数据库</span></span>可以为我们存储很多数重要数据，但是有时候数据过多的时候就会空间不足，那么你知道如何设计大型oracle数据吗?如果你还不知道的话就跟小编一起去看看设计大型Oracle数据库的方法。</p>

<p>　　<strong>一、概论</strong>　　超大型系统的特点为：</p>

<p>　　1、处理的用户数一般都超过百万，有的还超过千万，数据库的数据量一般超过1TB;</p>

<p>　　2、系统必须提供实时响应功能，系统需不停机运行，要求系统有很高的可用性及可扩展性。</p>

<p>　　为了能达到以上要求，除了需要性能优越的计算机和海量存储设备外，还需要先进的数据库结构设计和优化的应用系统。</p>

<p>　　一般的超大型系统采用双机或多机集群系统。下面以数据库采用Oracle 8.0.6并行服务器为例来谈谈超大型数据库设计方法：</p>

<p>　　确定系统的ORACLE并行服务器应用划分策略</p>

<p>　　数据库物理结构的设计</p>

<p>　　系统硬盘的划分及分配</p>

<p>　　备份及恢复策略的考虑</p>

<p>　　<strong>二、Oracle并行服务器应用划分策略</strong></p>

<p>　　Oracle并行服务器允许不同节点上的多个INSTANCE实例同时访问一个数据库，以提高系统的可用性、可扩展性及性能。Oracle并行服务器中的每个INSTANCE实例都可将共享数据库中的表或索引的数据块读入本地的缓冲区中，这就意味着一个数据块可存在于多个INSTANCE实例的SGA区中。那么保持这些缓冲区的数据的一致性就很重要。Oracle使用 PCM( Parallel Cache Management)锁维护缓冲区的一致性，Oracle同时通过I DLM(集成的分布式锁管理器)实现PCM 锁,并通过专门的LCK进程实现INSTANCE实例间的数据一致。</p>

<p>　　考虑这种情况：INSTANCE1对BLOCK X块修改，这时INSTANCE2对BLOCK X块也需要修改。Oracle并行服务器利用PCM锁机制，使BLOCK X从INSTANCE 1的SGA区写入数据库数据文件中，又从数据文件中把BLOCK X块读入INSTANCE2的SGA区中。发生这种情况即为一个PING。PING使原来1个MEMORY IO可以完成的工作变成2个DISK IO和1个 MEMORY IO才能够完成,如果系统中有过多的PING，将大大降低系统的性能。</p>

<p>　　Oracle并行服务器中的每个PCM锁可管理多个数据块。PCM锁管理的数据块的个数与分配给一个数据文件的PCM锁的个数及该数据文件的大小有关。当INSTANCE 1和INSTANCE 2要操作不同的BLOCK，如果这些BLOCK 是由同一个PCM锁管理的,仍然会发生PING。这些PING称为FALSE PING。当多个INSTANCE访问相同的BLOCK而产生的PING是TRUE PING。</p>

<p>　　合理的应用划分使不同的应用访问不同的数据，可避免或减少TRUE PING;通过给FALSE PING较多的数据文件分配更多的PCM锁可减少 FALSE PING的次数，增加PCM锁不能减少TRUE PING。</p>

<p>　　所以，Oracle并行服务器设计的目的是使系统交易处理合理的分布在INSTANCE实例间，以最小化PING，同时合理的分配PCM锁，减少FALSE PING。设计的关键是找出可能产生的冲突，从而决定应用划分的策略。应用划分有如下四种方法：</p>

<p>　　1、根据功能模块划分，不同的节点运行不同的应用</p>

<p>　　2、根据用户划分，不同类型的用户运行在不同的节点上</p>

<p>　　3、根据数据划分，不同的节点访问不同的数据或索引</p>

<p>　　4、根据时间划分，不同的应用在不同的时间段运行</p>

<p>　　应用划分的两个重要原则是使PING最小化及使各节点的负载大致均衡。</p>

<p>　　<strong>三、数据库物理结构的设计</strong></p>

<p>　　数据库物理结构设计包括确定表及索引的物理存储参数，确定及分配数据库表空间，确定初始的回滚段，临时表空间，redo log files等，并确定主要的初始化参数。物理设计的目的是提高系统的性能。整个物理设计的参数可以根据实际运行情况作调整。</p>

<p>　　表及索引数据量估算及物理存储参数的设置</p>

<p>　　表及索引的存储容量估算是根据其记录长度及估算的最大记录数确定的。在容量计算中考虑了数据块的头开销及记录和字段的头开销等等。表及索引的initial和next存储参数一般设为相等，pctincrease设为0。</p>

<p>　　上文就是小编为大家介绍设计大型Oracle数据库的方法，如果你也有这样的需要，那就赶快来学习一下吧。如果大家喜欢信息管理部技术频道的话，不妨可以推荐更多的朋友来哟!</p>
						</div>
					',`creator`='信息管理部',`created_at`='2019-12-12 14:47:55',`updated_at`='2019-12-12 14:47:55',`click`='2' WHERE `id` = 25 [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000034s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000052s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007423s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007444s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000457s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000471s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000594s ]
INFO: [ app_end ] --END-- [ RunTime:0.000607s ]

[ 2019-12-13T09:09:08+08:00 ] ::1 /Home/Index/ShowDetail?id=25
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000567s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000632s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000651s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0010s ]
SQL: SELECT * FROM `articles` WHERE `id` = 25 LIMIT 1   [ RunTime:0.0004s ]

[ 2019-12-13T09:09:32+08:00 ] ::1 /Home/Index/detail?id=20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000571s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000580s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000602s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` WHERE `id` = 20 LIMIT 1   [ RunTime:0.0003s ]
SQL: UPDATE `articles` SET `origin_url`='https://js.aizhan.com/develop/java/10582.html',`title`='详解SpringMVC 自动封装枚举类的方法',`text`='<div class=\"container\">
							
<p>Spring MVC的操作是不能直接注入的，只要实现了基本数据类型的自动转换注入，还提供了其他接口，可以根据自己的需要进行扩展，下面就让信息管理部技术频道小编为大家详解SpringMVC 自动封装枚举类的方法吧！</p>

<p><span style=\"color:#002FD9\">spring</span>mvc默认无法自动封装枚举类，解决方法如下：</p>

<p>1.枚举类</p>

<div class=\"aizhancode\">
<div class=\"codebody\"><pre class=\"brush:java;\">
public enum GoodsPromoteEnum {

  /**
   * 0 精品
   */
  fine(\"精品\",0),
  /**
   * 1 限时购
   */
  limit(\"限时购\",1), 
  /**
   * 2 特价
   */
  cheap(\"特价\",2);
  
  private String value;

  private int index;

  private GoodsPromoteEnum(String value, int index) {
    this.value = value;
    this.index = index;
  }
  
  public static GoodsPromoteEnum get(String value){
    for (GoodsPromoteEnum p : GoodsPromoteEnum.values()) {
      if (p.getValue().equals(value)) {
        return p;
      }
    }
    return null;
  }
  
  public static GoodsPromoteEnum get(int index){
    for (GoodsPromoteEnum p : GoodsPromoteEnum.values()) {
      if (p.getIndex() == index) {
        return p;
      }
    }
    return null;
  }

  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public int getIndex() {
    return index;
  }

  public void setIndex(int index) {
    this.index = index;
  }
}
</pre></div>
</div>

<p>2.编写自定义处理类，继承Converter接口</p>

<div class=\"aizhancode\">
<div class=\"codebody\"><pre class=\"brush:java;\">
public class StringToGoodsConverter implements Converter<String, GoodsPromoteEnum> {

  @Override
  public GoodsPromoteEnum convert(String value) {
    if (StringUtils.isBlank(value)) {
     return null;
    }
    return GoodsPromoteEnum.get(value);
  }

}
</pre></div>
</div>

<p>3.在springmvc配置文件里配置</p>

<div class=\"aizhancode\">
<div class=\"codebody\"><pre class=\"brush:xml;\">
  <!--自定义枚举类封装 -->
  <bean id=\"conversionService\" class=\"org.springframework.format.support.FormattingConversionServiceFactoryBean\">
    <property name=\"converters\">
     <set>
      <bean class=\"com.tentcoo.zbh.util.StringToGoodsConverter\" />
     </set>
    </property>
   </bean></pre></div>
</div>

<p>以上就是由信息管理部技术频道小编带来的详解SpringMVC 自动封装枚举类的方法，看完上述的介绍，相信大家已经学会了吧！</p>
						</div>
					',`creator`='信息管理部',`created_at`='2019-12-12 14:47:45',`updated_at`='2019-12-12 14:47:45',`click`='1' WHERE `id` = 20 [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000022s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000042s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008933s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008963s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000532s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000551s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000702s ]
INFO: [ app_end ] --END-- [ RunTime:0.000720s ]

[ 2019-12-13T09:09:32+08:00 ] ::1 /Home/Index/ShowDetail?id=20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000584s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000706s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000728s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` WHERE `id` = 20 LIMIT 1   [ RunTime:0.0003s ]

[ 2019-12-13T09:15:11+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000635s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000710s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000727s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000019s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000037s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.010270s ]
INFO: [ view_parse ] --END-- [ RunTime:0.010309s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001476s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001497s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000856s ]
INFO: [ app_end ] --END-- [ RunTime:0.000871s ]

[ 2019-12-13T09:15:11+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000599s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000694s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000716s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0024s ]

[ 2019-12-13T09:15:18+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000433s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000507s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000521s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000017s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000034s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008697s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008721s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000439s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000458s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000599s ]
INFO: [ app_end ] --END-- [ RunTime:0.000613s ]

[ 2019-12-13T09:15:18+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000631s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000756s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000779s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0028s ]

[ 2019-12-13T09:15:21+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000481s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000529s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000545s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0011s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0021s ]

[ 2019-12-13T09:16:13+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000026s ]
INFO: [ app_init ] --END-- [ RunTime:0.001365s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000502s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000518s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000019s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000036s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009257s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009284s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000513s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000530s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000684s ]
INFO: [ app_end ] --END-- [ RunTime:0.000701s ]

[ 2019-12-13T09:16:13+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000682s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002207s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002235s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0017s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0042s ]

[ 2019-12-13T09:16:15+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000640s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000695s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000719s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000023s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000048s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013443s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013487s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000838s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000869s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001088s ]
INFO: [ app_end ] --END-- [ RunTime:0.001119s ]

[ 2019-12-13T09:16:15+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000008s ]
INFO: [ app_init ] --END-- [ RunTime:0.000682s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000825s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000850s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0032s ]

[ 2019-12-13T09:16:17+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000447s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000512s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000529s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000018s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000037s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008450s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008473s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000514s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000530s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000686s ]
INFO: [ app_end ] --END-- [ RunTime:0.000703s ]

[ 2019-12-13T09:16:17+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000695s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000716s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000754s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0011s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0028s ]

[ 2019-12-13T09:16:21+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000009s ]
INFO: [ app_init ] --END-- [ RunTime:0.000672s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001294s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001336s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000025s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000050s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.010832s ]
INFO: [ view_parse ] --END-- [ RunTime:0.010867s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000657s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000681s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000971s ]
INFO: [ app_end ] --END-- [ RunTime:0.000997s ]

[ 2019-12-13T09:16:21+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000008s ]
INFO: [ app_init ] --END-- [ RunTime:0.000714s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000841s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000867s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0034s ]

[ 2019-12-13T09:16:22+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000916s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000553s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000571s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000018s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000036s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008880s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008912s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000596s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000618s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001099s ]
INFO: [ app_end ] --END-- [ RunTime:0.001167s ]

[ 2019-12-13T09:16:22+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000900s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000902s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000926s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0013s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0047s ]

[ 2019-12-13T09:16:22+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000685s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000760s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000786s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000025s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000058s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.011819s ]
INFO: [ view_parse ] --END-- [ RunTime:0.011855s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000622s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000642s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000827s ]
INFO: [ app_end ] --END-- [ RunTime:0.000847s ]

[ 2019-12-13T09:16:22+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000008s ]
INFO: [ app_init ] --END-- [ RunTime:0.000978s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000877s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000904s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0010s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0052s ]

[ 2019-12-13T09:16:23+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000478s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000800s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000823s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000018s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000034s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009137s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009164s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000501s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000517s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000664s ]
INFO: [ app_end ] --END-- [ RunTime:0.000680s ]

[ 2019-12-13T09:16:23+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000736s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001390s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001421s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0029s ]

[ 2019-12-13T09:16:28+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000386s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000461s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000474s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000015s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000028s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007336s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007364s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000530s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000550s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000722s ]
INFO: [ app_end ] --END-- [ RunTime:0.000741s ]

[ 2019-12-13T09:16:28+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000814s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000706s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000726s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0027s ]

[ 2019-12-13T09:16:30+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000483s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000560s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000575s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000017s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000034s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009016s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009051s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001074s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001177s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000953s ]
INFO: [ app_end ] --END-- [ RunTime:0.000973s ]

[ 2019-12-13T09:16:30+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000651s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001147s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001202s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0010s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0030s ]

[ 2019-12-13T09:16:31+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000032s ]
INFO: [ app_init ] --END-- [ RunTime:0.001712s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000543s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000560s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000018s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000035s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008609s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008638s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000629s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000662s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001138s ]
INFO: [ app_end ] --END-- [ RunTime:0.001161s ]

[ 2019-12-13T09:16:31+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000663s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000953s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000996s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0011s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0032s ]

[ 2019-12-13T09:16:32+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000502s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000668s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000692s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000047s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000114s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008596s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008621s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000485s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000501s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000634s ]
INFO: [ app_end ] --END-- [ RunTime:0.000649s ]

[ 2019-12-13T09:16:32+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000581s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000604s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000622s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0029s ]

[ 2019-12-13T09:16:33+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000003s ]
INFO: [ app_init ] --END-- [ RunTime:0.000432s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000506s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000522s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000016s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000032s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008140s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008163s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000508s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000524s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000660s ]
INFO: [ app_end ] --END-- [ RunTime:0.000675s ]

[ 2019-12-13T09:16:33+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000521s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000587s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000602s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0016s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0038s ]

[ 2019-12-13T09:16:33+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000460s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000514s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000529s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000016s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000032s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008405s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008430s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000533s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000549s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000737s ]
INFO: [ app_end ] --END-- [ RunTime:0.000755s ]

[ 2019-12-13T09:16:33+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000008s ]
INFO: [ app_init ] --END-- [ RunTime:0.001020s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000745s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000773s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0010s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0037s ]

[ 2019-12-13T09:16:33+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000465s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000526s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000543s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000018s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000035s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009873s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009966s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000841s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000860s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000664s ]
INFO: [ app_end ] --END-- [ RunTime:0.000681s ]

[ 2019-12-13T09:16:33+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000017s ]
INFO: [ app_init ] --END-- [ RunTime:0.000568s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000632s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000647s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0035s ]

[ 2019-12-13T09:16:33+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000502s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000568s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000585s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000017s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000036s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.010131s ]
INFO: [ view_parse ] --END-- [ RunTime:0.010157s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000530s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000547s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000705s ]
INFO: [ app_end ] --END-- [ RunTime:0.000722s ]

[ 2019-12-13T09:16:33+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000601s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000761s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000785s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0010s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0031s ]

[ 2019-12-13T09:16:34+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.001048s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000633s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000652s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000021s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000041s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009736s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009765s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000452s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000469s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001361s ]
INFO: [ app_end ] --END-- [ RunTime:0.001385s ]

[ 2019-12-13T09:16:34+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000707s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001310s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001347s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0033s ]

[ 2019-12-13T09:16:34+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000508s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000600s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000618s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000020s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000040s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009897s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009926s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000579s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000599s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000832s ]
INFO: [ app_end ] --END-- [ RunTime:0.000850s ]

[ 2019-12-13T09:16:34+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000572s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000704s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000722s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0018s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0034s ]

[ 2019-12-13T09:16:34+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000037s ]
INFO: [ app_init ] --END-- [ RunTime:0.000822s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001024s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001063s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000019s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000037s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009564s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009594s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000527s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000545s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000741s ]
INFO: [ app_end ] --END-- [ RunTime:0.000758s ]

[ 2019-12-13T09:16:34+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000629s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000697s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000715s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0011s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0033s ]

[ 2019-12-13T09:16:34+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000478s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001704s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001765s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000018s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000036s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009471s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009499s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000537s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000554s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000704s ]
INFO: [ app_end ] --END-- [ RunTime:0.000721s ]

[ 2019-12-13T09:16:34+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000983s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000692s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000711s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0033s ]

[ 2019-12-13T09:16:35+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000573s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001078s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001154s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000042s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000097s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008964s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008986s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000476s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000491s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000647s ]
INFO: [ app_end ] --END-- [ RunTime:0.000662s ]

[ 2019-12-13T09:16:35+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.001014s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000753s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000776s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0032s ]

[ 2019-12-13T09:16:35+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000504s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000534s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000549s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000017s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000035s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009164s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009186s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000453s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000470s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000684s ]
INFO: [ app_end ] --END-- [ RunTime:0.000700s ]

[ 2019-12-13T09:16:36+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000665s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000708s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000727s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0031s ]

[ 2019-12-13T09:16:36+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000482s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000571s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000588s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000019s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000040s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009531s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009559s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000501s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000517s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000657s ]
INFO: [ app_end ] --END-- [ RunTime:0.000674s ]

[ 2019-12-13T09:16:36+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000625s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000807s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000829s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0031s ]

[ 2019-12-13T09:16:36+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000016s ]
INFO: [ app_init ] --END-- [ RunTime:0.001281s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000758s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000782s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000021s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000044s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009638s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009663s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000594s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000616s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000772s ]
INFO: [ app_end ] --END-- [ RunTime:0.000793s ]

[ 2019-12-13T09:16:36+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000573s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000684s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000703s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0011s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0039s ]

[ 2019-12-13T09:16:36+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000502s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000604s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000622s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000018s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000038s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009379s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009431s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000567s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000583s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000680s ]
INFO: [ app_end ] --END-- [ RunTime:0.000698s ]

[ 2019-12-13T09:16:36+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000631s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000848s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000880s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0011s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0037s ]

[ 2019-12-13T09:16:36+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000583s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000638s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000659s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000021s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000043s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.010101s ]
INFO: [ view_parse ] --END-- [ RunTime:0.010128s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000539s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000558s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000755s ]
INFO: [ app_end ] --END-- [ RunTime:0.000773s ]

[ 2019-12-13T09:16:36+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000707s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000808s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000831s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0031s ]

[ 2019-12-13T09:16:44+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000470s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000524s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000536s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0026s ]

[ 2019-12-13T09:16:46+08:00 ] ::1 /Home/Index/detail?id=39
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000534s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000610s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000628s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` WHERE `id` = 39 LIMIT 1   [ RunTime:0.0003s ]
SQL: UPDATE `articles` SET `origin_url`='https://js.aizhan.com/develop/java/10582.html',`title`='详解SpringMVC 自动封装枚举类的方法',`text`='<div class=\"container\">
							
<p>Spring MVC的操作是不能直接注入的，只要实现了基本数据类型的自动转换注入，还提供了其他接口，可以根据自己的需要进行扩展，下面就让信息管理部技术频道小编为大家详解SpringMVC 自动封装枚举类的方法吧！</p>

<p><span style=\"color:#002FD9\">spring</span>mvc默认无法自动封装枚举类，解决方法如下：</p>

<p>1.枚举类</p>

<div class=\"aizhancode\">
<div class=\"codebody\"><pre class=\"brush:java;\">
public enum GoodsPromoteEnum {

  /**
   * 0 精品
   */
  fine(\"精品\",0),
  /**
   * 1 限时购
   */
  limit(\"限时购\",1), 
  /**
   * 2 特价
   */
  cheap(\"特价\",2);
  
  private String value;

  private int index;

  private GoodsPromoteEnum(String value, int index) {
    this.value = value;
    this.index = index;
  }
  
  public static GoodsPromoteEnum get(String value){
    for (GoodsPromoteEnum p : GoodsPromoteEnum.values()) {
      if (p.getValue().equals(value)) {
        return p;
      }
    }
    return null;
  }
  
  public static GoodsPromoteEnum get(int index){
    for (GoodsPromoteEnum p : GoodsPromoteEnum.values()) {
      if (p.getIndex() == index) {
        return p;
      }
    }
    return null;
  }

  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public int getIndex() {
    return index;
  }

  public void setIndex(int index) {
    this.index = index;
  }
}
</pre></div>
</div>

<p>2.编写自定义处理类，继承Converter接口</p>

<div class=\"aizhancode\">
<div class=\"codebody\"><pre class=\"brush:java;\">
public class StringToGoodsConverter implements Converter<String, GoodsPromoteEnum> {

  @Override
  public GoodsPromoteEnum convert(String value) {
    if (StringUtils.isBlank(value)) {
     return null;
    }
    return GoodsPromoteEnum.get(value);
  }

}
</pre></div>
</div>

<p>3.在springmvc配置文件里配置</p>

<div class=\"aizhancode\">
<div class=\"codebody\"><pre class=\"brush:xml;\">
  <!--自定义枚举类封装 -->
  <bean id=\"conversionService\" class=\"org.springframework.format.support.FormattingConversionServiceFactoryBean\">
    <property name=\"converters\">
     <set>
      <bean class=\"com.tentcoo.zbh.util.StringToGoodsConverter\" />
     </set>
    </property>
   </bean></pre></div>
</div>

<p>以上就是由信息管理部技术频道小编带来的详解SpringMVC 自动封装枚举类的方法，看完上述的介绍，相信大家已经学会了吧！</p>
						</div>
					',`creator`='信息管理部',`created_at`='2019-12-13 09:16:15',`updated_at`='2019-12-13 09:16:15',`click`='1' WHERE `id` = 39 [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000019s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000035s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008637s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008659s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000517s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000533s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000667s ]
INFO: [ app_end ] --END-- [ RunTime:0.000683s ]

[ 2019-12-13T09:16:46+08:00 ] ::1 /Home/Index/ShowDetail?id=39
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000008s ]
INFO: [ app_init ] --END-- [ RunTime:0.000988s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000965s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001015s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0011s ]
SQL: SELECT * FROM `articles` WHERE `id` = 39 LIMIT 1   [ RunTime:0.0004s ]

[ 2019-12-13T10:31:51+08:00 ] 192.168.3.35 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.002634s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002973s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002989s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000019s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000039s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.020882s ]
INFO: [ view_parse ] --END-- [ RunTime:0.020911s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002419s ]
INFO: [ view_filter ] --END-- [ RunTime:0.002435s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.003186s ]
INFO: [ app_end ] --END-- [ RunTime:0.003201s ]

[ 2019-12-13T10:31:53+08:00 ] 192.168.3.35 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000003s ]
INFO: [ app_init ] --END-- [ RunTime:0.000412s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000544s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000557s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0023s ]

[ 2019-12-13T10:40:20+08:00 ] 192.168.3.35 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000730s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000581s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000596s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000016s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000030s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008745s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008765s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000518s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000531s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000648s ]
INFO: [ app_end ] --END-- [ RunTime:0.000660s ]

[ 2019-12-13T10:40:20+08:00 ] 192.168.3.35 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000003s ]
INFO: [ app_init ] --END-- [ RunTime:0.000393s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000439s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000449s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0008s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0023s ]

[ 2019-12-13T10:57:32+08:00 ] 192.168.3.91 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000641s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000675s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000691s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000021s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000039s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.010360s ]
INFO: [ view_parse ] --END-- [ RunTime:0.010387s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000674s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000691s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000890s ]
INFO: [ app_end ] --END-- [ RunTime:0.000906s ]

[ 2019-12-13T10:57:32+08:00 ] 192.168.3.91 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000546s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000598s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000613s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0014s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0031s ]

[ 2019-12-13T10:57:33+08:00 ] 192.168.3.91 /Home/Index/more
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000468s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000508s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000524s ]
ERR: 非法操作:more

[ 2019-12-13T10:57:37+08:00 ] 192.168.3.91 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000711s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001223s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001264s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0010s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0034s ]

[ 2019-12-13T10:59:39+08:00 ] 192.168.3.91 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000650s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000772s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000791s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000020s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000041s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.011706s ]
INFO: [ view_parse ] --END-- [ RunTime:0.011731s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000628s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000644s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000791s ]
INFO: [ app_end ] --END-- [ RunTime:0.000806s ]

[ 2019-12-13T10:59:39+08:00 ] 192.168.3.91 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000816s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000563s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000578s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0009s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0033s ]

[ 2019-12-13T10:59:42+08:00 ] 192.168.3.91 /Home/Index/more
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000590s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000710s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000731s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000023s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000050s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.010954s ]
INFO: [ view_parse ] --END-- [ RunTime:0.010986s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000579s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000601s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000746s ]
INFO: [ app_end ] --END-- [ RunTime:0.000766s ]

[ 2019-12-13T10:59:42+08:00 ] 192.168.3.91 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000008s ]
INFO: [ app_init ] --END-- [ RunTime:0.001212s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000739s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000759s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0010s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0031s ]

[ 2019-12-13T11:00:07+08:00 ] 192.168.3.91 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000507s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000710s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000731s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0010s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0027s ]

[ 2019-12-13T11:15:02+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000844s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000963s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000990s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000024s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000048s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.012725s ]
INFO: [ view_parse ] --END-- [ RunTime:0.012753s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000811s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000831s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001020s ]
INFO: [ app_end ] --END-- [ RunTime:0.001039s ]

[ 2019-12-13T11:15:02+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000665s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000718s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000737s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0011s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0038s ]

[ 2019-12-13T11:15:24+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000004s ]
INFO: [ app_init ] --END-- [ RunTime:0.000446s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000496s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000510s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000016s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000033s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008184s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008326s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001031s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001050s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000611s ]
INFO: [ app_end ] --END-- [ RunTime:0.000625s ]

[ 2019-12-13T11:15:24+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000501s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000542s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000556s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0010s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0028s ]

[ 2019-12-13T11:16:09+08:00 ] ::1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000453s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000543s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000559s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000016s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000031s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008240s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008277s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000414s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000427s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000586s ]
INFO: [ app_end ] --END-- [ RunTime:0.000600s ]

[ 2019-12-13T11:16:09+08:00 ] ::1 /Home/Index/GetArticlesList
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000033s ]
INFO: [ app_init ] --END-- [ RunTime:0.001281s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000625s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000645s ]
SQL: SHOW COLUMNS FROM `articles` [ RunTime:0.0010s ]
SQL: SELECT * FROM `articles` ORDER BY id desc  [ RunTime:0.0030s ]

